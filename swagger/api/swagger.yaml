---
swagger: "2.0"
info:
  description: "## REST API for the BitMEX Trading Platform\n\n_If you are building\
    \ automated tools, please subscribe to the_\n_[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/)\
    \ for changes. The feed will be updated_\n_regularly and is the most reliable\
    \ way to get downtime and update announcements._\n\n[View Changelog](/app/apiChangelog)\n\
    \n---\n\n#### Getting Started\n\nBase URI: [https://www.bitmex.com/api/v1](/api/v1)\n\
    \n##### Fetching Data\n\nAll REST endpoints are documented below. You can try\
    \ out any query right from this interface.\n\nMost table queries accept `count`,\
    \ `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.\n\
    \nAdditional documentation regarding filters, timestamps, and authentication\n\
    is available in [the main API documentation](/app/restAPI).\n\n_All_ table data\
    \ is available via the [Websocket](/app/wsAPI). We highly recommend using the\
    \ socket if you want\nto have the quickest possible data without being subject\
    \ to ratelimits.\n\n##### Return Types\n\nBy default, all data is returned as\
    \ JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.\n\
    \n##### Trade Data Queries\n\n_This is only a small subset of what is available,\
    \ to get you started._\n\nFill in the parameters and click the `Try it out!` button\
    \ to try any of these queries.\n\n- [Pricing Data](#!/Quote/Quote_get)\n\n- [Trade\
    \ Data](#!/Trade/Trade_get)\n\n- [OrderBook Data](#!/OrderBook/OrderBook_getL2)\n\
    \n- [Settlement Data](#!/Settlement/Settlement_get)\n\n- [Exchange Statistics](#!/Stats/Stats_history)\n\
    \nEvery function of the BitMEX.com platform is exposed here and documented. Many\
    \ more functions are available.\n\n##### Swagger Specification\n\n[â‡© Download\
    \ Swagger JSON](swagger.json)\n\n---\n\n## All API Endpoints\n\nClick to expand\
    \ a section.\n"
  version: "1.2.0"
  title: "BitMEX API"
  termsOfService: "https://www.bitmex.com/app/terms"
  contact:
    email: "support@bitmex.com"
host: "www.bitmex.com"
basePath: "/api/v1"
tags:
- name: "Announcement"
  description: "Public Announcements"
- name: "APIKey"
  description: "Persistent API Keys for Developers"
- name: "Chat"
  description: "Trollbox Data"
- name: "Execution"
  description: "Raw Order and Balance Data"
- name: "Funding"
  description: "Swap Funding History"
- name: "Instrument"
  description: "Tradeable Contracts, Indices, and History"
- name: "Insurance"
  description: "Insurance Fund Data"
- name: "Leaderboard"
  description: "Information on Top Users"
- name: "Liquidation"
  description: "Active Liquidations"
- name: "GlobalNotification"
  description: "Account Notifications"
- name: "Order"
  description: "Placement, Cancellation, Amending, and History"
- name: "OrderBook"
  description: "Level 2 Book Data"
- name: "Position"
  description: "Summary of Open and Closed Positions"
- name: "Quote"
  description: "Best Bid/Offer Snapshots & Historical Bins"
- name: "Schema"
  description: "Dynamic Schemata for Developers"
- name: "Settlement"
  description: "Historical Settlement Data"
- name: "Stats"
  description: "Exchange Statistics"
- name: "Trade"
  description: "Individual & Bucketed Trades"
- name: "User"
  description: "Account Operations"
- name: "UserEvent"
  description: "User Events for Auditing"
- name: "Wallet"
  description: "Assets and Networks Data"
- name: "Address"
- name: "UserAffiliates"
- name: "Campaign"
- name: "FormSubmission"
- name: "Guild"
- name: "Porl"
  description: "Proof of Reserves/Liabilities"
consumes:
- "application/json"
- "application/x-www-form-urlencoded"
produces:
- "application/json"
- "application/xml"
- "text/xml"
- "application/javascript"
- "text/javascript"
security:
- apiKey: []
  apiSignature: []
  apiExpires: []
paths:
  /announcement:
    get:
      tags:
      - "Announcement"
      summary: "Get site announcements."
      operationId: "Announcement.get"
      parameters:
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Announcement"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /announcement/urgent:
    get:
      tags:
      - "Announcement"
      summary: "Get urgent (banner) announcements."
      operationId: "Announcement.getUrgent"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Announcement"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /apiKey:
    get:
      tags:
      - "APIKey"
      summary: "Get your API Keys."
      operationId: "APIKey.get"
      parameters:
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/APIKey"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /chat/pinned:
    get:
      tags:
      - "Chat"
      summary: "Get pinned message for a channel."
      operationId: "Chat.getPinnedMessage"
      parameters:
      - name: "channelID"
        in: "query"
        required: true
        type: "number"
        format: "double"
        x-exportParamName: "ChannelID"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/PinnedMessage"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /chat:
    get:
      tags:
      - "Chat"
      summary: "Get chat messages."
      operationId: "Chat.get"
      parameters:
      - name: "count"
        in: "query"
        description: "Number of results to fetch."
        required: false
        type: "number"
        default: 100
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting ID for results."
        required: false
        type: "number"
        default: 0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "channelID"
        in: "query"
        description: "Channel id. GET /chat/channels for ids. Global English by default"
        required: false
        type: "number"
        default: 1
        format: "double"
        x-exportParamName: "ChannelID"
        x-optionalDataType: "Float64"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Chat"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "Chat"
      summary: "Send a chat message."
      operationId: "Chat.new"
      parameters:
      - name: "message"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Message"
      - name: "channelID"
        in: "formData"
        description: "Channel to post to. Default 1 (English)."
        required: false
        type: "number"
        default: 1
        format: "double"
        x-exportParamName: "ChannelID"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Chat"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /chat/channels:
    get:
      tags:
      - "Chat"
      summary: "Get available channels."
      operationId: "Chat.getChannels"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ChatChannel"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /chat/connected:
    get:
      tags:
      - "Chat"
      summary: "Get connected users."
      description: "Returns an array with browser users in the first position and\
        \ API users (bots) in the second position."
      operationId: "Chat.getConnected"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/ConnectedUsers"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /execution:
    get:
      tags:
      - "Execution"
      summary: "Get all raw executions for your account."
      description: "This returns all raw transactions, which includes order opening\
        \ and cancelation, and order status\nchanges. It can be quite noisy. More\
        \ focused information is available at `/execution/tradeHistory`.\n\nYou may\
        \ also use the `filter` param to target your query. Specify an array as a\
        \ filter value, such as\n`{\"execType\": [\"Settlement\", \"Trade\"]}` to\
        \ filter on multiple values.\n\nSee [the FIX Spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_8_8.html)\
        \ for explanations of these fields.\n"
      operationId: "Execution.get"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Execution"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /execution/tradeHistory:
    get:
      tags:
      - "Execution"
      summary: "Get all balance-affecting executions."
      operationId: "Execution.getTradeHistory"
      parameters:
      - name: "targetAccountId"
        in: "query"
        description: "AccountId fetching the trade history, must be a paired account\
          \ with main user."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "TargetAccountId"
        x-optionalDataType: "Float64"
      - name: "targetAccountIds"
        in: "query"
        description: "AccountIds fetching the trade history, must be a paired account\
          \ with main user. Can be wildcard * to get all accounts linked to the authenticated\
          \ user"
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "TargetAccountIds"
        x-optionalDataType: "String"
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Execution"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /funding:
    get:
      tags:
      - "Funding"
      summary: "Get funding history."
      operationId: "Funding.get"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Funding"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /instrument:
    get:
      tags:
      - "Instrument"
      summary: "Get instruments."
      description: "This returns all instruments and indices, including those that\
        \ have settled or are unlisted.\nUse this endpoint if you want to query for\
        \ individual instruments or use a complex filter.\nUse `/instrument/active`\
        \ to return active instruments, or use a filter like `{\"state\": \"Open\"\
        }`.\n\nThe instrument type is specified by the `typ` param.\n\n- Perpetual\
        \ Contracts - `FFWCSX`\n- Perpetual Contracts (FX underliers) - `FFWCSF`\n\
        - Spot - `IFXXXP`\n- Futures - `FFCCSX`\n- BitMEX Basket Index - `MRBXXX`\n\
        - BitMEX Crypto Index - `MRCXXX`\n- BitMEX FX Index - `MRFXXX`\n- BitMEX Lending/Premium\
        \ Index - `MRRXXX`\n- BitMEX Volatility Index - `MRIXXX`\n"
      operationId: "Instrument.get"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Instrument"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /instrument/active:
    get:
      tags:
      - "Instrument"
      summary: "Get all active instruments and instruments that have expired in <24hrs."
      operationId: "Instrument.getActive"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Instrument"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /instrument/indices:
    get:
      tags:
      - "Instrument"
      summary: "Get all price indices."
      operationId: "Instrument.getIndices"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Instrument"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /instrument/activeAndIndices:
    get:
      tags:
      - "Instrument"
      summary: "Helper method. Gets all active instruments and all indices. This is\
        \ a join of the result of /indices and /active."
      operationId: "Instrument.getActiveAndIndices"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Instrument"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /instrument/activeIntervals:
    get:
      tags:
      - "Instrument"
      summary: "Return all active contract series and interval pairs."
      description: "This endpoint is useful for determining which pairs are live.\
        \ It returns two arrays of   strings. The first is intervals, such as `[\"\
        XBT:perpetual\", \"XBT:quarterly\", \"XBT:biquarterly\", \"ETH:quarterly\"\
        , ...]`. These identifiers are usable in any query's `symbol` param. The second\
        \ array is the current resolution of these intervals. Results are mapped at\
        \ the same index."
      operationId: "Instrument.getActiveIntervals"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/InstrumentInterval"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /instrument/compositeIndex:
    get:
      tags:
      - "Instrument"
      summary: "Show constituent parts of an index."
      description: "Composite indices are built from multiple external price sources.\n\
        \nUse this endpoint to get the underlying prices of an index. For example,\
        \ send a `symbol` of `.BXBT` to\nget the ticks and weights of the constituent\
        \ exchanges that build the \".BXBT\" index.\n\nA tick with reference `\"BMI\"\
        ` and weight `null` is the composite index tick.\n"
      operationId: "Instrument.getCompositeIndex"
      parameters:
      - name: "symbol"
        in: "query"
        description: "The composite index symbol."
        required: false
        type: "string"
        default: ".BXBT"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/IndexComposite"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /instrument/usdVolume:
    get:
      tags:
      - "Instrument"
      summary: "Get a summary of exchange statistics in USD."
      operationId: "Instrument.getUsdVolume"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Filter by symbol."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StatsUSDBySymbol"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /insurance:
    get:
      tags:
      - "Insurance"
      summary: "Get insurance fund history."
      operationId: "Insurance.get"
      parameters:
      - name: "currency"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Currency"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Insurance"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /leaderboard:
    get:
      tags:
      - "Leaderboard"
      summary: "Get current leaderboard."
      operationId: "Leaderboard.get"
      parameters:
      - name: "method"
        in: "query"
        description: "Ranking type. Options: \"notional\", \"ROE\""
        required: false
        type: "string"
        default: "notional"
        x-exportParamName: "Method"
        x-optionalDataType: "String"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Leaderboard"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /leaderboard/name:
    get:
      tags:
      - "Leaderboard"
      summary: "Get your alias on the leaderboard."
      operationId: "Leaderboard.getName"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/inline_response_200"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /liquidation:
    get:
      tags:
      - "Liquidation"
      summary: "Get liquidation orders."
      operationId: "Liquidation.get"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Liquidation"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /globalNotification:
    get:
      tags:
      - "GlobalNotification"
      summary: "Get your current GlobalNotifications."
      description: "This is an upcoming feature and currently does not return data."
      operationId: "GlobalNotification.get"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GlobalNotification"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /order:
    get:
      tags:
      - "Order"
      summary: "Get your orders."
      description: "To get open orders only, send {\"open\": true} in the filter param.\n\
        \nSee <a href=\"http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_D_68.html\"\
        >the FIX Spec</a> for explanations of these fields."
      operationId: "Order.getOrders"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "Order"
      summary: "Create a new order."
      description: "## Placing Orders\n\nThis endpoint is used for placing orders.\
        \ See individual fields below for more details on their use.\n\n#### Order\
        \ Types\n\nAll orders require a `symbol`. All other fields are optional except\
        \ when otherwise specified.\n\nThese are the valid `ordType`s:\n\n- **Limit**:\
        \ The default order type. Specify an `orderQty` and `price`.\n- **Market**:\
        \ A traditional Market order. A Market order will execute until filled or\
        \ your bankruptcy price is reached, at\n  which point it will cancel.\n- **Stop**:\
        \ A Stop Market order. Specify an `orderQty` and `stopPx`. When the `stopPx`\
        \ is reached, the order will be entered\n  into the book.\n  - On sell orders,\
        \ the order will trigger if the triggering price is lower than the `stopPx`.\
        \ On buys, higher.\n  - Note: Stop orders do not consume margin until triggered.\
        \ Be sure that the required margin is available in your\n    account so that\
        \ it may trigger fully.\n  - `Close` Stops don't require an `orderQty`. See\
        \ Execution Instructions below.\n- **StopLimit**: Like a Stop Market, but\
        \ enters a Limit order instead of a Market order. Specify an `orderQty`, `stopPx`,\n\
        \  and `price`.\n- **MarketIfTouched**: Similar to a Stop, but triggers are\
        \ done in the opposite direction. Useful for Take Profit orders.\n- **LimitIfTouched**:\
        \ As above; use for Take Profit Limit orders.\n- **Pegged**: Pegged orders\
        \ allow users to submit a limit price relative to the current market price.\
        \ Specify a\n  `pegPriceType`, and `pegOffsetValue`.\n  - Pegged orders **must**\
        \ have an `execInst` of `Fixed`. This means the limit price is set at the\
        \ time the order\n    is accepted and does not change as the reference price\
        \ changes.\n  - `PrimaryPeg`: Price is set relative to near touch price.\n\
        \  - `MarketPeg`: Price is set relative to far touch price.\n  - A `pegPriceType`\
        \ submitted with no `ordType` is treated as a `Pegged` order.\n\n#### Execution\
        \ Instructions\n\nThe following `execInst`s are supported. If using multiple,\
        \ separate with a comma (e.g. `LastPrice,Close`).\n\n- **ParticipateDoNotInitiate**:\
        \ Also known as a Post-Only order. If this order would have executed on placement,\
        \ it will cancel instead.\n  This is intended to protect you from the far\
        \ touch moving towards you while the order is in transit.\n  It is not intended\
        \ for speculating on the far touch moving away after submission - we consider\
        \ such behaviour abusive and monitor for it.\n- **MarkPrice, LastPrice, IndexPrice**:\
        \ Used by stop and if-touched orders to determine the triggering price.\n\
        \  Use only one. By default, `MarkPrice` is used. Also used for Pegged orders\
        \ to define the value of `LastPeg`. IndexPrice is not applicable to spot trading\
        \ symbols.\n- **ReduceOnly**: A `ReduceOnly` order can only reduce your position,\
        \ not increase it. If you have a `ReduceOnly`\n  limit order that rests in\
        \ the order book while the position is reduced by other orders, then its order\
        \ quantity will\n  be amended down or canceled. If there are multiple `ReduceOnly`\
        \ orders the least aggressive will be amended first. Not applicable to spot\
        \ trading symbols.\n- **Close**: `Close` implies `ReduceOnly`. A `Close` order\
        \ will cancel other active limit orders with the same side\n  and symbol if\
        \ the open quantity exceeds the current position. This is useful for stops:\
        \ by canceling these orders, a\n  `Close` Stop is ensured to have the margin\
        \ required to execute, and can only execute up to the full size of your\n\
        \  position. If `orderQty` is not specified, a `Close` order has an `orderQty`\
        \ equal to your current position's size. Not applicable to spot trading symbols.\n\
        \  - Note that a `Close` order without an `orderQty` requires a `side`, so\
        \ that BitMEX knows if it should trigger\n    above or below the `stopPx`.\n\
        - **LastWithinMark**: Used by stop orders with `LastPrice` to allow stop triggers\
        \ only when:\n  - For Sell Stop Market / Stop Limit Order\n    - Last Price\
        \ &lt= Stop Price\n    - Last Price &gt= Mark Price Ã— (1 - 5%)\n  - For Buy\
        \ Stop Market / Stop Limit Order:\n    - Last Price &gt= Stop Price\n    -\
        \ Last Price &lt= Mark Price Ã— (1 + 5%)\n  - Not applicable to spot trading\
        \ symbols.\n- **Fixed**: Pegged orders **must** have an `execInst` of `Fixed`.\
        \ This means the limit price is set at the time\n  the order is accepted and\
        \ does not change as the reference price changes.\n\n#### Pegged Orders\n\n\
        Pegged orders allow users to submit a limit price relative to the current\
        \ market price.\nThe limit price is set once when the order is submitted and\
        \ does not change with the reference price.\nThis order type is not intended\
        \ for speculating on the far touch moving away after submission - we consider\
        \ such behaviour abusive and monitor for it.\n\nPegged orders have an `ordType`\
        \ of `Pegged`, and an `execInst` of `Fixed`.\n\nA `pegPriceType` and `pegOffsetValue`\
        \ must also be submitted:\n\n- `PrimaryPeg` - price is set relative to the\
        \ **near touch** price\n- `MarketPeg` - price is set relative to the **far\
        \ touch** price\n\n#### Trailing Stop Pegged Orders\n\nUse `pegPriceType`\
        \ of `TrailingStopPeg` to create Trailing Stops.\n\nThe price is set at submission\
        \ and updates once per second if the underlying price (last/mark/index) has\
        \ moved by\nmore than 0.1%. `stopPx` then moves as the market moves away from\
        \ the peg, and freezes as the market moves toward it.\n\nUse `pegOffsetValue`\
        \ to set the `stopPx` of your order. The peg is set to the triggering price\
        \ specified in the\n`execInst` (default `MarkPrice`). Use a negative offset\
        \ for stop-sell and buy-if-touched orders.\n\nRequires `ordType`: `Stop`,\
        \ `StopLimit`, `MarketIfTouched`, `LimitIfTouched`.\n\n#### Linked Orders\n\
        \nLinked Orders are an advanced capability. It is very powerful, but its use\
        \ requires careful coding and testing.\nPlease follow this document carefully\
        \ and use the [Testnet Exchange](https://testnet.bitmex.com) while developing.\n\
        \nBitMEX offers four advanced Linked Order types:\n\n- **OCO**: _One Cancels\
        \ the Other_. A very flexible version of the standard Stop / Take Profit technique.\n\
        \  Multiple orders may be linked together using a single `clOrdLinkID`. Send\
        \ a `contingencyType` of\n  `OneCancelsTheOther` on the orders. The first\
        \ order that fully or partially executes (or activates\n  for `Stop` orders)\
        \ will cancel all other orders with the same `clOrdLinkID`.\n- **OTO**: _One\
        \ Triggers the Other_. Send a `contingencyType` of `'OneTriggersTheOther'`\
        \ on the primary order and\n  then subsequent orders with the same `clOrdLinkID`\
        \ will be not be triggered until the primary order fully executes.\n\n####\
        \ Trailing Stops\n\nYou may use `pegPriceType` of `'TrailingStopPeg'` to create\
        \ Trailing Stops. The pegged `stopPx` will move as the market\nmoves away\
        \ from the peg, and freeze as the market moves toward it.\n\nTo use, combine\
        \ with `pegOffsetValue` to set the `stopPx` of your order. The peg is set\
        \ to the triggering price\nspecified in the `execInst` (default `'MarkPrice'`).\
        \ Use a negative offset for stop-sell and buy-if-touched orders.\n\nRequires\
        \ `ordType`: `'Stop', 'StopLimit', 'MarketIfTouched', 'LimitIfTouched'`.\n\
        \n#### Simple Quantities\n\n[Simple Quantities are deprecated as of 2018/10/26](https://blog.bitmex.com/api_announcement/deprecation-of-simpleorderqty-functionality/)\n\
        \n#### Rate Limits\n\nYou can improve your reactivity to market movements\
        \ while staying under your rate limit by using the\n[Amend](#!/Order/Order_amend)\
        \ endpoint (PUT /order). This allows you to stay\nin the market and avoids\
        \ the cancel/replace cycle.\n\n#### Tracking Your Orders\n\nIf you want to\
        \ keep track of order IDs yourself, set a unique `clOrdID` per order.\nThis\
        \ `clOrdID` will come back as a property on the order and any related executions\
        \ (including on the WebSocket),\nand can be used to get or cancel the order.\
        \ Max length is 36 characters.\n\nYou can also change the `clOrdID` by amending\
        \ an order, supplying an `origClOrdID`, and your desired new\nID as the `clOrdID`\
        \ param, like so:\n\n```\n# Amends an order's leavesQty, and updates its clOrdID\
        \ to \"def-456\"\nPUT /api/v1/order {\"origClOrdID\": \"abc-123\", \"clOrdID\"\
        : \"def-456\", \"leavesQty\": 1000}\n```\n"
      operationId: "Order.new"
      parameters:
      - name: "symbol"
        in: "formData"
        description: "Instrument symbol. e.g. 'XBTUSD'."
        required: true
        type: "string"
        x-exportParamName: "Symbol"
      - name: "side"
        in: "formData"
        description: "Order side. Valid options: Buy, Sell. Defaults to 'Buy' unless\
          \ `orderQty` is negative."
        required: false
        type: "string"
        x-exportParamName: "Side"
        x-optionalDataType: "String"
      - name: "simpleOrderQty"
        in: "formData"
        description: "Deprecated: simple orders are not supported after 2018/10/26"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "SimpleOrderQty"
        x-optionalDataType: "Float64"
      - name: "orderQty"
        in: "formData"
        description: "Order quantity in units of the instrument (i.e. contracts, for\
          \ spot it is base currency in minor currency for spot (e.g. XBt quantity\
          \ for XBT))."
        required: false
        type: "number"
        format: "int32"
        x-exportParamName: "OrderQty"
        x-optionalDataType: "Float32"
      - name: "price"
        in: "formData"
        description: "Optional limit price for 'Limit', 'StopLimit', and 'LimitIfTouched'\
          \ orders."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Price"
        x-optionalDataType: "Float64"
      - name: "displayQty"
        in: "formData"
        description: "Optional quantity to display in the book. Use 0 for a fully\
          \ hidden order."
        required: false
        type: "number"
        format: "int32"
        x-exportParamName: "DisplayQty"
        x-optionalDataType: "Float32"
      - name: "stopPx"
        in: "formData"
        description: "Optional trigger price for 'Stop', 'StopLimit', 'MarketIfTouched',\
          \ and 'LimitIfTouched' orders. Use a price below the current price for stop-sell\
          \ orders and buy-if-touched orders. Use `execInst` of 'MarkPrice' or 'LastPrice'\
          \ to define the current price used for triggering."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "StopPx"
        x-optionalDataType: "Float64"
      - name: "clOrdID"
        in: "formData"
        description: "Optional Client Order ID. This clOrdID will come back on the\
          \ order and any related executions."
        required: false
        type: "string"
        x-exportParamName: "ClOrdID"
        x-optionalDataType: "String"
      - name: "clOrdLinkID"
        in: "formData"
        description: "Optional Client Order Link ID for contingent orders"
        required: false
        type: "string"
        x-exportParamName: "ClOrdLinkID"
        x-optionalDataType: "String"
      - name: "pegOffsetValue"
        in: "formData"
        description: "Optional trailing offset from the current price for 'Stop',\
          \ 'StopLimit', 'MarketIfTouched', and 'LimitIfTouched' orders; use a negative\
          \ offset for stop-sell orders and buy-if-touched orders. Optional offset\
          \ from the peg price for 'Pegged' orders."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "PegOffsetValue"
        x-optionalDataType: "Float64"
      - name: "pegPriceType"
        in: "formData"
        description: "Optional peg price type. Valid options: MarketPeg, PrimaryPeg,\
          \ TrailingStopPeg."
        required: false
        type: "string"
        x-exportParamName: "PegPriceType"
        x-optionalDataType: "String"
      - name: "ordType"
        in: "formData"
        description: "Order type. Valid options: Market, Limit, Stop, StopLimit, MarketIfTouched,\
          \ LimitIfTouched, Pegged. Defaults to 'Limit' when `price` is specified.\
          \ Defaults to 'Stop' when `stopPx` is specified. Defaults to 'StopLimit'\
          \ when `price` and `stopPx` are specified."
        required: false
        type: "string"
        default: "Limit"
        x-exportParamName: "OrdType"
        x-optionalDataType: "String"
      - name: "timeInForce"
        in: "formData"
        description: "Time in force. Valid options: Day, GoodTillCancel, ImmediateOrCancel,\
          \ FillOrKill. Defaults to 'GoodTillCancel' for 'Limit', 'StopLimit', and\
          \ 'LimitIfTouched' orders."
        required: false
        type: "string"
        x-exportParamName: "TimeInForce"
        x-optionalDataType: "String"
      - name: "execInst"
        in: "formData"
        description: "Optional execution instructions. Valid options: ParticipateDoNotInitiate,\
          \ AllOrNone, MarkPrice, IndexPrice, LastPrice, Close, ReduceOnly, Fixed,\
          \ LastWithinMark. 'AllOrNone' instruction requires `displayQty` to be 0.\
          \ 'MarkPrice', 'IndexPrice' or 'LastPrice' instruction valid for 'Stop',\
          \ 'StopLimit', 'MarketIfTouched', and 'LimitIfTouched' orders. 'LastWithinMark'\
          \ instruction valid for 'Stop' and 'StopLimit' with instruction 'LastPrice'.\
          \ IndexPrice, LastWithMark, Close and ReduceOnly are not applicable to spot\
          \ trading symbols."
        required: false
        type: "string"
        x-exportParamName: "ExecInst"
        x-optionalDataType: "String"
      - name: "contingencyType"
        in: "formData"
        description: "Optional contingency type for use with `clOrdLinkID`. Valid\
          \ options: OneCancelsTheOther, OneTriggersTheOther."
        required: false
        type: "string"
        x-exportParamName: "ContingencyType"
        x-optionalDataType: "String"
      - name: "text"
        in: "formData"
        description: "Optional order annotation. e.g. 'Take profit'."
        required: false
        type: "string"
        x-exportParamName: "Text"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "Order"
      summary: "Amend the quantity or price of an open order."
      description: "Send an `orderID` or `origClOrdID` to identify the order you wish\
        \ to amend.\n\nBoth order quantity and price can be amended. Only one `qty`\
        \ field can be used to amend.\n\nUse the `leavesQty` field to specify how\
        \ much of the order you wish to remain open. This can be useful\nif you want\
        \ to adjust your position's delta by a certain amount, regardless of how much\
        \ of the order has\nalready filled.\n\n> A `leavesQty` can be used to make\
        \ a \"Filled\" order live again, if it is received within 60 seconds of the\
        \ fill.\n"
      operationId: "Order.amend"
      parameters:
      - name: "orderID"
        in: "formData"
        description: "Order ID"
        required: false
        type: "string"
        x-exportParamName: "OrderID"
        x-optionalDataType: "String"
      - name: "origClOrdID"
        in: "formData"
        description: "Client Order ID. See POST /order."
        required: false
        type: "string"
        x-exportParamName: "OrigClOrdID"
        x-optionalDataType: "String"
      - name: "clOrdID"
        in: "formData"
        description: "Optional new Client Order ID, requires `origClOrdID`."
        required: false
        type: "string"
        x-exportParamName: "ClOrdID"
        x-optionalDataType: "String"
      - name: "simpleOrderQty"
        in: "formData"
        description: "Deprecated: simple orders are not supported after 2018/10/26"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "SimpleOrderQty"
        x-optionalDataType: "Float64"
      - name: "orderQty"
        in: "formData"
        description: "Optional order quantity in units of the instrument (i.e. contracts,\
          \ for spot it is the base currency in minor currency (e.g. XBt quantity\
          \ for XBT))."
        required: false
        type: "number"
        format: "int32"
        x-exportParamName: "OrderQty"
        x-optionalDataType: "Float32"
      - name: "simpleLeavesQty"
        in: "formData"
        description: "Deprecated: simple orders are not supported after 2018/10/26"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "SimpleLeavesQty"
        x-optionalDataType: "Float64"
      - name: "leavesQty"
        in: "formData"
        description: "Optional leaves quantity in units of the instrument (i.e. contracts,\
          \ for spot it is the base currency in minor currency (e.g. XBt quantity\
          \ for XBT)). Useful for amending partially filled orders."
        required: false
        type: "number"
        format: "int32"
        x-exportParamName: "LeavesQty"
        x-optionalDataType: "Float32"
      - name: "price"
        in: "formData"
        description: "Optional limit price for 'Limit', 'StopLimit', and 'LimitIfTouched'\
          \ orders."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Price"
        x-optionalDataType: "Float64"
      - name: "stopPx"
        in: "formData"
        description: "Optional trigger price for 'Stop', 'StopLimit', 'MarketIfTouched',\
          \ and 'LimitIfTouched' orders. Use a price below the current price for stop-sell\
          \ orders and buy-if-touched orders."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "StopPx"
        x-optionalDataType: "Float64"
      - name: "pegOffsetValue"
        in: "formData"
        description: "Optional trailing offset from the current price for 'Stop',\
          \ 'StopLimit', 'MarketIfTouched', and 'LimitIfTouched' orders; use a negative\
          \ offset for stop-sell orders and buy-if-touched orders. Optional offset\
          \ from the peg price for 'Pegged' orders."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "PegOffsetValue"
        x-optionalDataType: "Float64"
      - name: "text"
        in: "formData"
        description: "Optional amend annotation. e.g. 'Adjust skew'."
        required: false
        type: "string"
        x-exportParamName: "Text"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "Order"
      summary: "Cancel order(s). Send multiple order IDs to cancel in bulk."
      description: "Either an orderID or a clOrdID must be provided."
      operationId: "Order.cancel"
      parameters:
      - name: "orderID"
        in: "formData"
        description: "Order ID(s)."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "OrderID"
        x-optionalDataType: "String"
      - name: "clOrdID"
        in: "formData"
        description: "Client Order ID(s). See POST /order."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "ClOrdID"
        x-optionalDataType: "String"
      - name: "text"
        in: "formData"
        description: "Optional cancellation annotation. e.g. 'Spread Exceeded'."
        required: false
        type: "string"
        x-exportParamName: "Text"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /order/closePosition:
    post:
      tags:
      - "Order"
      summary: "Close a position. [Deprecated, use POST /order with execInst: 'Close']"
      description: "If no `price` is specified, a market order will be submitted to\
        \ close the whole of your position. This will also close all other open orders\
        \ in this symbol."
      operationId: "Order.closePosition"
      parameters:
      - name: "symbol"
        in: "formData"
        description: "Symbol of position to close."
        required: true
        type: "string"
        x-exportParamName: "Symbol"
      - name: "price"
        in: "formData"
        description: "Optional limit price."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Price"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /order/all:
    delete:
      tags:
      - "Order"
      summary: "Cancels all of your orders."
      operationId: "Order.cancelAll"
      parameters:
      - name: "targetAccountIds"
        in: "formData"
        description: "AccountIds to cancel all orders, must be a paired account with\
          \ main user. Also accepts wildcard, [*], this will cancel all orders for\
          \ all accounts. the authenticated user has order write permissions for."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "TargetAccountIds"
        x-optionalDataType: "String"
      - name: "symbol"
        in: "formData"
        description: "Optional symbol. If provided, only cancels orders for that symbol."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "formData"
        description: "Optional filter for cancellation. Use to only cancel some orders,\
          \ e.g. `{\"side\": \"Buy\"}`."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "text"
        in: "formData"
        description: "Optional cancellation annotation. e.g. 'Spread Exceeded'"
        required: false
        type: "string"
        x-exportParamName: "Text"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /order/cancelAllAfter:
    post:
      tags:
      - "Order"
      summary: "Automatically cancel all your orders after a specified timeout."
      description: "Useful as a dead-man's switch to ensure your orders are canceled\
        \ in case of an outage.\nIf called repeatedly, the existing offset will be\
        \ canceled and a new one will be inserted in its place.\n\nExample usage:\
        \ call this route at 15s intervals with an offset of 60000 (60s).\nIf this\
        \ route is not called within 60 seconds, all your orders will be automatically\
        \ canceled.\n\nThis is also available via [WebSocket](https://www.bitmex.com/app/wsAPI#Dead-Mans-Switch-Auto-Cancel).\n"
      operationId: "Order.cancelAllAfter"
      parameters:
      - name: "timeout"
        in: "formData"
        description: "Timeout in ms. Set to 0 to cancel this timer. "
        required: true
        type: "number"
        format: "double"
        x-exportParamName: "Timeout"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /orderBook/L2:
    get:
      tags:
      - "OrderBook"
      summary: "Get current orderbook in vertical format."
      operationId: "OrderBook.getL2"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a series (e.g. XBT) to get data for\
          \ the nearest contract in that series."
        required: true
        type: "string"
        x-exportParamName: "Symbol"
      - name: "depth"
        in: "query"
        description: "Orderbook depth per side. Send 0 for full depth."
        required: false
        type: "number"
        default: 25
        minimum: 0
        format: "int32"
        x-exportParamName: "Depth"
        x-optionalDataType: "Float32"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/OrderBookL2"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /position:
    get:
      tags:
      - "Position"
      summary: "Get your positions."
      description: "This endpoint is used for retrieving position information. The\
        \ fields largely follow the [FIX spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html)\
        \ definitions. Some selected fields are explained in more detail below.\n\n\
        The fields _account_, _symbol_, _currency_ are unique to each position and\
        \ form its key.\n\nSpot trading symbols returns a subset of the position fields,\
        \ mainly the open order aggregates.\n\n- **account**: Your unique account\
        \ ID.\n- **symbol**: The contract for this position.\n- **currency**: The\
        \ margin currency for this position.\n- **underlying**: Meta data of the _symbol_.\n\
        - **quoteCurrency**: Meta data of the _symbol_, All prices are in the _quoteCurrency_\n\
        - **commission**: The maximum of the maker, taker, and settlement fee.\n-\
        \ **initMarginReq**: The initial margin requirement. This will be at least\
        \ the symbol's default initial maintenance margin, but can be higher if you\
        \ choose lower leverage.\n- **maintMarginReq**: The maintenance margin requirement.\
        \ This will be at least the symbol's default maintenance maintenance margin,\
        \ but can be higher if you choose a higher risk limit.\n- **riskLimit**: This\
        \ is a function of your _maintMarginReq_.\n- **leverage**: 1 / initMarginReq.\n\
        - **crossMargin**: True/false depending on whether you set cross margin on\
        \ this position.\n- **deleveragePercentile**: Indicates where your position\
        \ is in the ADL queue.\n- **rebalancedPnl**: The value of realised PNL that\
        \ has transferred to your wallet for this position.\n- **prevRealisedPnl**:\
        \ The value of realised PNL that has transferred to your wallet for this position\
        \ since the position was closed.\n- **currentQty**: The current position amount\
        \ in contracts.\n- **currentCost**: The current cost of the position in the\
        \ settlement currency of the symbol (_currency_).\n- **currentComm**: The\
        \ current commission of the position in the settlement currency of the symbol\
        \ (_currency_).\n- **realisedCost**: The realised cost of this position calculated\
        \ with regard to average cost accounting.\n- **unrealisedCost**: _currentCost_\
        \ - _realisedCost_.\n- **grossOpenPremium**: The amount your bidding above\
        \ the mark price in the settlement currency of the symbol (_currency_).\n\
        - **markPrice**: The mark price of the symbol in _quoteCurrency_.\n- **markValue**:\
        \ The _currentQty_ at the mark price in the settlement currency of the symbol\
        \ (_currency_).\n- **homeNotional**: Value of position in units of _underlying_.\n\
        - **foreignNotional**: Value of position in units of _quoteCurrency_.\n- **realisedPnl**:\
        \ The negative of _realisedCost_.\n- **unrealisedPnl**: _unrealisedGrossPnl_.\n\
        - **liquidationPrice**: Once markPrice reaches this price, this position will\
        \ be liquidated.\n- **bankruptPrice**: Once markPrice reaches this price,\
        \ this position will have no equity.\n"
      operationId: "Position.get"
      parameters:
      - name: "filter"
        in: "query"
        description: "Table filter. For example, send {\"symbol\": \"XBTUSD\"}."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Which columns to fetch. For example, send [\"columnName\"]."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of rows to fetch."
        required: false
        type: "number"
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Position"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /position/isolate:
    post:
      tags:
      - "Position"
      summary: "Enable isolated margin or cross margin per-position."
      description: "Users can switch isolate margin per-position. This function allows\
        \ switching margin isolation (aka fixed margin) on and off."
      operationId: "Position.isolateMargin"
      parameters:
      - name: "symbol"
        in: "formData"
        description: "Position symbol to isolate."
        required: true
        type: "string"
        x-exportParamName: "Symbol"
      - name: "enabled"
        in: "formData"
        description: "True for isolated margin, false for cross margin."
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "Enabled"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Position"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /position/riskLimit:
    post:
      tags:
      - "Position"
      summary: "Update your risk limit."
      description: "Risk Limits limit the size of positions you can trade at various\
        \ margin levels. Larger positions require more margin. Please see the Risk\
        \ Limit documentation for more details."
      operationId: "Position.updateRiskLimit"
      parameters:
      - name: "symbol"
        in: "formData"
        description: "Symbol of position to update risk limit on."
        required: true
        type: "string"
        x-exportParamName: "Symbol"
      - name: "riskLimit"
        in: "formData"
        description: "New Risk Limit, in Satoshis."
        required: true
        type: "number"
        format: "int64"
        x-exportParamName: "RiskLimit"
      - name: "targetAccountId"
        in: "formData"
        description: "AccountId for the position that the risk limit would be updated\
          \ on, must be a paired account with main user."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "TargetAccountId"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Position"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /position/transferMargin:
    post:
      tags:
      - "Position"
      summary: "Transfer equity in or out of a position."
      description: "When margin is isolated on a position, use this function to add\
        \ or remove margin from the position. Note that you cannot remove margin below\
        \ the initial margin threshold."
      operationId: "Position.transferIsolatedMargin"
      parameters:
      - name: "symbol"
        in: "formData"
        description: "Symbol of position to isolate."
        required: true
        type: "string"
        x-exportParamName: "Symbol"
      - name: "amount"
        in: "formData"
        description: "Amount to transfer, in Satoshis. May be negative."
        required: true
        type: "number"
        format: "int64"
        x-exportParamName: "Amount"
      - name: "targetAccountId"
        in: "formData"
        description: "AccountId for the position that the margin would be transfered\
          \ to, must be a paired account with main user."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "TargetAccountId"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Position"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /position/leverage:
    post:
      tags:
      - "Position"
      summary: "Choose leverage for a position."
      description: "Users can choose an isolated leverage. This will automatically\
        \ enable isolated margin."
      operationId: "Position.updateLeverage"
      parameters:
      - name: "symbol"
        in: "formData"
        description: "Symbol of position to adjust."
        required: true
        type: "string"
        x-exportParamName: "Symbol"
      - name: "leverage"
        in: "formData"
        description: "Leverage value. Send a number between 0.01 and 100 to enable\
          \ isolated margin with a fixed leverage. Send 0 to enable cross margin."
        required: true
        type: "number"
        format: "double"
        x-exportParamName: "Leverage"
      - name: "targetAccountId"
        in: "formData"
        description: "AccountId for the position that the leverage would be changed\
          \ on, must be a paired account with main user."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "TargetAccountId"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Position"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /quote:
    get:
      tags:
      - "Quote"
      summary: "Get Quotes."
      operationId: "Quote.get"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Quote"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /quote/bucketed:
    get:
      tags:
      - "Quote"
      summary: "Get previous quotes in time buckets."
      description: "Timestamps returned by our bucketed endpoints are the **end**\
        \ of the period, indicating when the bucket was written to disk. Some other\
        \ common systems use the timestamp as the beginning of the period. Please\
        \ be aware of this when using this endpoint."
      operationId: "Quote.getBucketed"
      parameters:
      - name: "binSize"
        in: "query"
        description: "Time interval to bucket by. Available options: [1m,5m,1h,1d]."
        required: false
        type: "string"
        default: "1m"
        x-exportParamName: "BinSize"
        x-optionalDataType: "String"
      - name: "partial"
        in: "query"
        description: "If true, will send in-progress (incomplete) bins for the current\
          \ time period."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Partial"
        x-optionalDataType: "Bool"
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Quote"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /schema:
    get:
      tags:
      - "Schema"
      summary: "Get model schemata for data objects returned by this API."
      operationId: "Schema.get"
      parameters:
      - name: "model"
        in: "query"
        description: "Optional model filter. If omitted, will return all models."
        required: false
        type: "string"
        x-exportParamName: "Model"
        x-optionalDataType: "String"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /schema/websocketHelp:
    get:
      tags:
      - "Schema"
      summary: "Returns help text & subject list for websocket usage."
      operationId: "Schema.websocketHelp"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /settlement:
    get:
      tags:
      - "Settlement"
      summary: "Get settlement history."
      operationId: "Settlement.get"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Settlement"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /stats:
    get:
      tags:
      - "Stats"
      summary: "Get exchange-wide and per-series turnover and volume statistics."
      operationId: "Stats.get"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Stats"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /stats/history:
    get:
      tags:
      - "Stats"
      summary: "Get historical exchange-wide and per-series turnover and volume statistics."
      operationId: "Stats.history"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StatsHistory"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /stats/historyUSD:
    get:
      tags:
      - "Stats"
      summary: "Get a summary of exchange statistics in USD."
      operationId: "Stats.historyUSD"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StatsUSD"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /trade:
    get:
      tags:
      - "Trade"
      summary: "Get Trades."
      description: "Please note that indices (symbols starting with `.`) post trades\
        \ at intervals to the trade feed. These have a `size` of 0 and are used only\
        \ to indicate a changing price.\n\nSee [the FIX Spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AE_6569.html)\
        \ for explanations of these fields."
      operationId: "Trade.get"
      parameters:
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Trade"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /trade/bucketed:
    get:
      tags:
      - "Trade"
      summary: "Get previous trades in time buckets."
      description: "Timestamps returned by our bucketed endpoints are the **end**\
        \ of the period, indicating when the bucket was written to disk. Some other\
        \ common systems use the timestamp as the beginning of the period. Please\
        \ be aware of this when using this endpoint.\n\nAlso note the `open` price\
        \ is equal to the `close` price of the previous timeframe bucket."
      operationId: "Trade.getBucketed"
      parameters:
      - name: "binSize"
        in: "query"
        description: "Time interval to bucket by. Available options: [1m,5m,1h,1d]."
        required: false
        type: "string"
        default: "1m"
        x-exportParamName: "BinSize"
        x-optionalDataType: "String"
      - name: "partial"
        in: "query"
        description: "If true, will send in-progress (incomplete) bins for the current\
          \ time period."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Partial"
        x-optionalDataType: "Bool"
      - name: "symbol"
        in: "query"
        description: "Instrument symbol. Send a bare series (e.g. XBT) to get data\
          \ for the nearest expiring contract in that series.\n\nYou can also send\
          \ a timeframe, e.g. `XBT:quarterly`. Timeframes are `nearest`, `daily`,\
          \ `weekly`, `monthly`, `quarterly`, `biquarterly`, and `perpetual`.\n\n\
          Symbols are case-insensitive."
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "filter"
        in: "query"
        description: "Generic table filter. Send JSON key/value pairs, such as `{\"\
          key\": \"value\"}`. You can key on individual fields, and do more advanced\
          \ querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#Timestamp-Filters)\
          \ for more details."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "columns"
        in: "query"
        description: "Array of column names to fetch. If omitted, will return all\
          \ columns.\n\nNote that this method will always return item keys, even when\
          \ not specified, so you may receive more columns that you expect."
        required: false
        type: "string"
        format: "JSON"
        x-exportParamName: "Columns"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Must be a positive integer."
        required: false
        type: "number"
        default: 100
        format: "int32"
        x-exportParamName: "Count"
        x-optionalDataType: "Float32"
      - name: "start"
        in: "query"
        description: "Starting point for results."
        required: false
        type: "number"
        default: 0
        format: "int32"
        x-exportParamName: "Start"
        x-optionalDataType: "Float32"
      - name: "reverse"
        in: "query"
        description: "If true, will sort results newest first."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      - name: "startTime"
        in: "query"
        description: "Starting date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "Ending date filter for results."
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TradeBin"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/depositAddress:
    get:
      tags:
      - "User"
      summary: "Get a deposit address."
      operationId: "User.getDepositAddress"
      parameters:
      - name: "currency"
        in: "query"
        description: "Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\"\
          >asset config endpoint</a>"
        required: true
        type: "string"
        x-exportParamName: "Currency"
      - name: "network"
        in: "query"
        description: "The `network` parameter is used to indicate which blockchain\
          \ you would like to deposit from. The acceptable value in the `network`\
          \ parameter for each currency can be found from `networks.asset` from `GET\
          \ /wallet/assets`."
        required: true
        type: "string"
        x-exportParamName: "Network"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "string"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/depositAddressInformation:
    get:
      tags:
      - "User"
      summary: "Get a deposit address."
      operationId: "User.getDepositAddressInformation"
      parameters:
      - name: "currency"
        in: "query"
        description: "Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\"\
          >asset config endpoint</a>"
        required: true
        type: "string"
        x-exportParamName: "Currency"
      - name: "network"
        in: "query"
        description: "The `network` parameter is used to indicate which blockchain\
          \ you would like to deposit from. The acceptable value in the `network`\
          \ parameter for each currency can be found from `networks.asset` from `GET\
          \ /wallet/assets`."
        required: true
        type: "string"
        x-exportParamName: "Network"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/DepositAddress"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/wallet:
    get:
      tags:
      - "User"
      summary: "Get your current wallet information."
      operationId: "User.getWallet"
      parameters:
      - name: "currency"
        in: "query"
        description: "Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\"\
          >asset config endpoint</a>. For all currencies specify \"all\""
        required: false
        type: "string"
        default: "XBt"
        x-exportParamName: "Currency"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Wallet"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/walletHistory:
    get:
      tags:
      - "User"
      summary: "Get a history of all of your wallet transactions (deposits, withdrawals,\
        \ PNL)."
      operationId: "User.getWalletHistory"
      parameters:
      - name: "currency"
        in: "query"
        description: "Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\"\
          >asset config endpoint</a>. For all currencies specify \"all\""
        required: false
        type: "string"
        default: "XBt"
        x-exportParamName: "Currency"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Number of results to fetch. Fetch results from start to start\
          \ + count. Max: 10,000 rows."
        required: false
        type: "number"
        default: 10000
        format: "double"
        x-exportParamName: "Count"
        x-optionalDataType: "Float64"
      - name: "start"
        in: "query"
        description: "Starting point for results, integer. Default 0."
        required: false
        type: "number"
        default: 0
        format: "double"
        x-exportParamName: "Start"
        x-optionalDataType: "Float64"
      - name: "targetAccountId"
        in: "query"
        description: "AccountId to view the history of, must be a paired account with\
          \ the authorised user requesting the history."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "TargetAccountId"
        x-optionalDataType: "Float64"
      - name: "reverse"
        in: "query"
        description: "Start from the latest transaction record. Default true."
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "Reverse"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Transaction"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/walletSummary:
    get:
      tags:
      - "User"
      summary: "Get a summary of all of your wallet transactions (deposits, withdrawals,\
        \ PNL)."
      description: "Provides an aggregated view of transactions, by transaction type,\
        \ over a specific time period."
      operationId: "User.getWalletSummary"
      parameters:
      - name: "currency"
        in: "query"
        description: "Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\"\
          >asset config endpoint</a>. For all currencies specify \"all\""
        required: false
        type: "string"
        default: "XBt"
        x-exportParamName: "Currency"
        x-optionalDataType: "String"
      - name: "startTime"
        in: "query"
        description: "Start time for the summary"
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "StartTime"
        x-optionalDataType: "Time"
      - name: "endTime"
        in: "query"
        description: "End time for the summary"
        required: false
        type: "string"
        format: "date-time"
        x-exportParamName: "EndTime"
        x-optionalDataType: "Time"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/WalletSummaryRecord"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/executionHistory:
    get:
      tags:
      - "User"
      summary: "Get the execution history by day."
      operationId: "User.getExecutionHistory"
      parameters:
      - name: "symbol"
        in: "query"
        required: true
        type: "string"
        default: "XBTUSD"
        x-exportParamName: "Symbol"
      - name: "timestamp"
        in: "query"
        required: true
        type: "string"
        default: "2017-02-13T12:00:00.000Z"
        format: "date-time"
        x-exportParamName: "Timestamp"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Execution"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/staking:
    get:
      tags:
      - "User"
      summary: "Get the current user staking amount."
      operationId: "User.getStaking"
      parameters:
      - name: "currency"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Currency"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StakingRecord"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/unstakingRequests:
    get:
      tags:
      - "User"
      summary: "Get the current user unstaking requests"
      operationId: "User.getUnstakingRequests"
      parameters:
      - name: "status"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "Status"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StakingRecord"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "User"
      summary: "Create unstaking request"
      operationId: "User.createUnstakingRequests"
      parameters:
      - name: "symbol"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Symbol"
      - name: "amount"
        in: "formData"
        required: true
        type: "number"
        format: "double"
        x-exportParamName: "Amount"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
      - "User"
      summary: "Cancel unstaking request"
      operationId: "User.deleteUnstakingRequests"
      parameters:
      - name: "redemptionID"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "RedemptionID"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/staking/instruments:
    get:
      tags:
      - "User"
      summary: "List staking instruments"
      operationId: "User.getStakingInstruments"
      parameters:
      - name: "symbol"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Symbol"
        x-optionalDataType: "String"
      - name: "currency"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Currency"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/x-any"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/staking/tiers:
    get:
      tags:
      - "User"
      summary: "List staking tiers for a given currency"
      operationId: "User.getStakingTiers"
      parameters:
      - name: "currency"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "Currency"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/x-any"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/walletTransfer:
    post:
      tags:
      - "User"
      summary: "Execute a transfer to a linked account."
      operationId: "User.walletTransfer"
      parameters:
      - name: "currency"
        in: "formData"
        description: "Currency you're transfering. Any currency. For all currencies,\
          \ see <a href=\"#!/Wallet/Wallet_getAssetsConfig\">asset config endpoint</a>"
        required: true
        type: "string"
        x-exportParamName: "Currency"
      - name: "amount"
        in: "formData"
        description: "Amount of transfer."
        required: true
        type: "number"
        format: "int64"
        x-exportParamName: "Amount"
      - name: "fromAccountId"
        in: "formData"
        description: "AccountID to send the transfer from. Must be paired account\
          \ with the authenticated user."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "FromAccountId"
        x-optionalDataType: "Float64"
      - name: "targetAccountId"
        in: "formData"
        description: "AccountId to send the transfer to, must be a paired account\
          \ with the user sending the transfer."
        required: true
        type: "number"
        format: "double"
        x-exportParamName: "TargetAccountId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Transaction"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/requestWithdrawal:
    post:
      tags:
      - "User"
      summary: "Request a withdrawal to an external wallet or separate BitMEX account."
      description: "### Email Confirmation\n\nIn most cases, this endpoint will send\
        \ a confirmation email to the email address on record. When withdrawing to\
        \ a saved address (i.e. given `addressId` or a corresponding `address`) with\
        \ `skipConfirm` configured, the withdrawal will be immediately confirmed.\n\
        \n### Two-Factor Authentication\n\nA valid 2FA code (`otpToken`) is required\
        \ for all withdrawals unless the destination address is associated with either\
        \ a saved address with `skip2FA` configured or a linked BitMEX account (e.g.\
        \ a subaccount).\n\n### Internal Transfers\n\nIf a valid BitMEX deposit address\
        \ is provided, the transaction will be made directly between BitMEX accounts.\
        \ There will be no resulting on-chain transaction and no network fee will\
        \ be charged.\n\nWhen given another account ID (`targetUserId`), the request\
        \ will only succeed if the account is linked to the authenticated account.\n\
        \nNote that `/api/v1/user/walletTransfer` may be a more suitable endpoint\
        \ for transfers between linked accounts."
      operationId: "User.requestWithdrawal"
      parameters:
      - name: "otpToken"
        in: "formData"
        description: "2FA token. Required for all external withdrawals unless the\
          \ destination is a saved address with `skip2FA` configured."
        required: false
        type: "string"
        x-exportParamName: "OtpToken"
        x-optionalDataType: "String"
      - name: "currency"
        in: "formData"
        description: "Currency you're withdrawing. Any currency. For all currencies,\
          \ see <a href=\"#!/Wallet/Wallet_getAssetsConfig\">asset config endpoint</a>"
        required: true
        type: "string"
        default: "XBt"
        x-exportParamName: "Currency"
      - name: "network"
        in: "formData"
        description: "The `network` parameter is used to indicate which blockchain\
          \ you would like to withdraw from. The acceptable value in the `network`\
          \ parameter for each currency can be found from `networks.asset` from `GET\
          \ /api/v1/wallet/assets`."
        required: true
        type: "string"
        x-exportParamName: "Network"
      - name: "amount"
        in: "formData"
        description: "Amount of withdrawal currency."
        required: true
        type: "number"
        format: "int64"
        x-exportParamName: "Amount"
      - name: "address"
        in: "formData"
        description: "Destination Address. One of `address`, `addressId`, `targetUserId`\
          \ has to be specified."
        required: false
        type: "string"
        x-exportParamName: "Address"
        x-optionalDataType: "String"
      - name: "memo"
        in: "formData"
        description: "Destination Memo. If `address`, is specified, destination Memo\
          \ can also be specified. If given an `addressId` or `address` matching a\
          \ saved address, the destination memo from the saved address will be used."
        required: false
        type: "string"
        x-exportParamName: "Memo"
        x-optionalDataType: "String"
      - name: "addressId"
        in: "formData"
        description: "ID of the Destination Address. One of `address`, `addressId`,\
          \ `targetUserId` has to be specified."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "AddressId"
        x-optionalDataType: "Float64"
      - name: "targetUserId"
        in: "formData"
        description: "ID of a linked BitMEX account. One of `address`, `addressId`,\
          \ `targetUserId` has to be specified."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "TargetUserId"
        x-optionalDataType: "Float64"
      - name: "fee"
        in: "formData"
        description: "Network fee for Bitcoin withdrawals. If not specified, a default\
          \ value will be calculated based on Bitcoin network conditions. You will\
          \ have a chance to confirm this via email."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Fee"
        x-optionalDataType: "Float64"
      - name: "text"
        in: "formData"
        description: "Optional annotation, e.g. 'Transfer to home wallet'."
        required: false
        type: "string"
        x-exportParamName: "Text"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Transaction"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/withdrawal:
    delete:
      tags:
      - "User"
      summary: "Cancel pending withdrawal"
      operationId: "User.cancelPendingWithdrawal"
      parameters:
      - name: "transactID"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "TransactID"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/cancelWithdrawal:
    post:
      tags:
      - "User"
      summary: "Cancel a withdrawal."
      operationId: "User.cancelWithdrawal"
      parameters:
      - name: "token"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Token"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Transaction"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/confirmWithdrawal:
    post:
      tags:
      - "User"
      summary: "Confirm a withdrawal."
      operationId: "User.confirmWithdrawal"
      parameters:
      - name: "token"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Token"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Transaction"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/confirmEmail:
    post:
      tags:
      - "User"
      summary: "Confirm your email address with a token."
      operationId: "User.confirm"
      parameters:
      - name: "token"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Token"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/AccessToken"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/affiliateStatus:
    get:
      tags:
      - "User"
      summary: "Get your current affiliate/referral status."
      operationId: "User.getAffiliateStatus"
      parameters:
      - name: "currency"
        in: "query"
        description: "Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\"\
          >asset config endpoint</a>. For all currencies specify \"all\""
        required: false
        type: "string"
        default: "XBt"
        x-exportParamName: "Currency"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Affiliate"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/checkReferralCode:
    get:
      tags:
      - "User"
      summary: "Check if a referral code is valid."
      description: "If the code is valid, responds with the referral code's discount\
        \ (e.g. `0.1` for 10%). Otherwise, will return a 404 or 451 if invalid."
      operationId: "User.checkReferralCode"
      parameters:
      - name: "referralCode"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ReferralCode"
        x-optionalDataType: "String"
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/quoteFillRatio:
    get:
      tags:
      - "User"
      summary: "Get 7 days worth of Quote Fill Ratio statistics."
      operationId: "User.getQuoteFillRatio"
      parameters:
      - name: "targetAccountId"
        in: "query"
        description: "AccountId to get quote fill ratio for, must be a paired account\
          \ with main user. Can be wildcard * to get all accounts linked to the authenticated\
          \ user"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "TargetAccountId"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/QuoteFillRatio"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/quoteValueRatio:
    get:
      tags:
      - "User"
      summary: "Get Quote Value Ratio statistics over the last 3 days"
      operationId: "User.getQuoteValueRatio"
      parameters:
      - name: "targetAccountId"
        in: "query"
        description: "AccountId to get quote value ratio for, must be a paired account\
          \ with main user. Can be wildcard * to get all accounts linked to the authenticated\
          \ user"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "TargetAccountId"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/QuoteValueRatio"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/tradingVolume:
    get:
      tags:
      - "User"
      summary: "Get your 30 days USD average trading volume"
      operationId: "User.getTradingVolume"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TradingVolume"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/addSubaccount:
    post:
      tags:
      - "User"
      summary: "Creates a new sub-account."
      operationId: "User.createSubAccount"
      parameters:
      - name: "accountName"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "AccountName"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/createIndependentSubaccount:
    post:
      tags:
      - "User"
      summary: "Creates a new independant sub-account."
      operationId: "User.createIndependentSubaccount"
      parameters:
      - name: "email"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Email"
      - name: "accountName"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "AccountName"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/updateSubaccount:
    post:
      tags:
      - "User"
      summary: "Updates the sub-account name."
      operationId: "User.updateSubAccount"
      parameters:
      - name: "targetAccountId"
        in: "formData"
        required: true
        type: "number"
        format: "double"
        x-exportParamName: "TargetAccountId"
      - name: "accountName"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "AccountName"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/getWalletTransferAccounts:
    get:
      tags:
      - "User"
      summary: "Get the list of accounts you can transfer funds between."
      operationId: "User.getWalletTransferAccounts"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/x-any"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/logout:
    post:
      tags:
      - "User"
      summary: "Log out of BitMEX."
      operationId: "User.logout"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "null"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/preferences:
    post:
      tags:
      - "User"
      summary: "Save user preferences."
      operationId: "User.savePreferences"
      parameters:
      - name: "prefs"
        in: "formData"
        required: true
        type: "string"
        format: "JSON"
        x-exportParamName: "Prefs"
      - name: "overwrite"
        in: "formData"
        description: "If true, will overwrite all existing preferences."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Overwrite"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user:
    get:
      tags:
      - "User"
      summary: "Get your user model."
      operationId: "User.get"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/commission:
    get:
      tags:
      - "User"
      summary: "Get your account's commission status."
      operationId: "User.getCommission"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/UserCommissionsBySymbol"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/margin:
    get:
      tags:
      - "User"
      summary: "Get your account's margin status. Send a currency of \"all\" to receive\
        \ an array of all supported currencies."
      operationId: "User.getMargin"
      parameters:
      - name: "currency"
        in: "query"
        description: "Any currency. For all currencies, see <a href=\"#!/Wallet/Wallet_getAssetsConfig\"\
          >asset config endpoint</a>. For all currencies specify \"all\""
        required: false
        type: "string"
        default: "XBt"
        x-exportParamName: "Currency"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Margin"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/csa:
    get:
      tags:
      - "User"
      summary: "Get your account's CSA status."
      operationId: "User.getCSA"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/CollateralSupportAgreement"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /user/communicationToken:
    post:
      tags:
      - "User"
      summary: "Register your communication token for mobile clients"
      operationId: "User.communicationToken"
      parameters:
      - name: "token"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Token"
      - name: "platformAgent"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "PlatformAgent"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CommunicationToken"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /userEvent:
    get:
      tags:
      - "UserEvent"
      summary: "Get your user events"
      operationId: "UserEvent.get"
      parameters:
      - name: "count"
        in: "query"
        description: "Number of results to fetch."
        required: false
        type: "number"
        default: 100
        format: "double"
        x-exportParamName: "Count"
        x-optionalDataType: "Float64"
      - name: "startId"
        in: "query"
        description: "Cursor for pagination."
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "StartId"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserEvent"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /wallet/assets:
    get:
      tags:
      - "Wallet"
      summary: "Get Assets Config"
      operationId: "Wallet.getAssetsConfig"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AssetsConfig"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /wallet/networks:
    get:
      tags:
      - "Wallet"
      summary: "Get Networks Config"
      operationId: "Wallet.getNetworksConfig"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/NetworksConfig"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /address:
    get:
      tags:
      - "Address"
      summary: "Get your addresses."
      operationId: "Address.get"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Address"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "Address"
      summary: "Creates a new saved address."
      operationId: "Address.new"
      parameters:
      - name: "currency"
        in: "formData"
        description: "Currency of the address. Options: `XBt`, `USDt`"
        required: false
        type: "string"
        x-exportParamName: "Currency"
        x-optionalDataType: "String"
      - name: "network"
        in: "formData"
        description: "Selected network."
        required: true
        type: "string"
        x-exportParamName: "Network"
      - name: "address"
        in: "formData"
        description: "Destination Address."
        required: true
        type: "string"
        x-exportParamName: "Address"
      - name: "name"
        in: "formData"
        description: "Name of the entry, eg. 'Hardware wallet'."
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "note"
        in: "formData"
        description: "Optional annotation."
        required: false
        type: "string"
        x-exportParamName: "Note"
        x-optionalDataType: "String"
      - name: "skipConfirm"
        in: "formData"
        description: "Skip e-mail confirmations for transfers to this address. Will\
          \ require an email confirmation after creation."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "SkipConfirm"
        x-optionalDataType: "Bool"
      - name: "skip2FA"
        in: "formData"
        description: "Skip 2FA confirmations for transfers to this address. Will require\
          \ an email confirmation after creation."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Skip2FA"
        x-optionalDataType: "Bool"
      - name: "memo"
        in: "formData"
        description: "Destination Memo."
        required: false
        type: "string"
        x-exportParamName: "Memo"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Address"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /userAffiliates:
    get:
      tags:
      - "UserAffiliates"
      summary: "Get user's affiliates to a given depth"
      operationId: "UserAffiliates.get"
      parameters:
      - name: "depth"
        in: "query"
        description: "the depth of affiliates to return. Eg depth = 2 would return\
          \ direct affiliates and their affiliates"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "Depth"
        x-optionalDataType: "Float64"
      - name: "targetAccountId"
        in: "query"
        description: "AccountId of Sub-Affiliate Account"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "TargetAccountId"
        x-optionalDataType: "Float64"
      - name: "selectUserId"
        in: "query"
        description: "User id of result array to keep"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "SelectUserId"
        x-optionalDataType: "Float64"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/x-any"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /campaign/all:
    get:
      tags:
      - "Campaign"
      summary: "Returns all campaigns data"
      operationId: "Campaign.getAllCampaigns"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/x-any"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /formSubmission:
    get:
      tags:
      - "FormSubmission"
      summary: "Returns whether the provided form type has been submitted by the user"
      operationId: "FormSubmission.get"
      parameters:
      - name: "type"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "Type_"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "boolean"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "FormSubmission"
      summary: "Create a new form submission"
      operationId: "FormSubmission.new"
      parameters:
      - in: "body"
        name: "form"
        required: true
        schema:
          type: "object"
        x-exportParamName: "Form"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "boolean"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /guild:
    get:
      tags:
      - "Guild"
      summary: "Get all guilds"
      operationId: "Guild.get"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/x-any"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
      - "Guild"
      summary: "Creates a new guild"
      operationId: "Guild.new"
      parameters:
      - name: "name"
        in: "formData"
        description: "Name of the guild, must be unique, must be at least 5 characters"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "emoji"
        in: "formData"
        description: "Emoji name."
        required: true
        type: "string"
        x-exportParamName: "Emoji"
      - name: "potDistributionPercent"
        in: "formData"
        description: "How much of the pot should be distributed to the guild members,\
          \ must be between 0 and 100"
        required: true
        type: "number"
        format: "double"
        x-exportParamName: "PotDistributionPercent"
      - name: "potDistributionType"
        in: "formData"
        description: "How the pot should be distributed to the guild members, must\
          \ be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE,\
          \ TOP_3_BY_ADV, TOP_5_BY_ADV, TOP_10_BY_ADV, TOP_3_BY_ROI, TOP_5_BY_ROI,\
          \ TOP_10_BY_ROI, RANDOM"
        required: true
        type: "string"
        x-exportParamName: "PotDistributionType"
      - name: "description"
        in: "formData"
        description: "Guild description, can be used to explain the guild to other\
          \ users."
        required: false
        type: "string"
        x-exportParamName: "Description"
        x-optionalDataType: "String"
      - name: "twitter"
        in: "formData"
        description: "Guild twitter handle."
        required: false
        type: "string"
        x-exportParamName: "Twitter"
        x-optionalDataType: "String"
      - name: "discord"
        in: "formData"
        description: "Guild discord link."
        required: false
        type: "string"
        x-exportParamName: "Discord"
        x-optionalDataType: "String"
      - name: "telegram"
        in: "formData"
        description: "Guild telegram link."
        required: false
        type: "string"
        x-exportParamName: "Telegram"
        x-optionalDataType: "String"
      - name: "imgUrl"
        in: "formData"
        description: "URL for the profile image of the guild, is used by clients to\
          \ add some color to the guild, if no image is provided, a default image\
          \ is used"
        required: false
        type: "string"
        x-exportParamName: "ImgUrl"
        x-optionalDataType: "String"
      - name: "isPrivate"
        in: "formData"
        description: "Guild privacy status"
        required: false
        type: "boolean"
        x-exportParamName: "IsPrivate"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Guild"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
      - "Guild"
      summary: "Edit guild new guild"
      operationId: "Guild.edit"
      parameters:
      - name: "name"
        in: "formData"
        description: "Name of the guild, must be unique, must be at least 5 characters"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "emoji"
        in: "formData"
        description: "Emoji name."
        required: true
        type: "string"
        x-exportParamName: "Emoji"
      - name: "potDistributionPercent"
        in: "formData"
        description: "How much of the pot should be distributed to the guild members,\
          \ must be between 0 and 100"
        required: true
        type: "number"
        format: "double"
        x-exportParamName: "PotDistributionPercent"
      - name: "potDistributionType"
        in: "formData"
        description: "How the pot should be distributed to the guild members, must\
          \ be one of the following: ROLL_OVER, TOP_3, TOP_5, TOP_10, VOLUME_PERCENTAGE,\
          \ TOP_3_BY_ADV, TOP_5_BY_ADV, TOP_10_BY_ADV, TOP_3_BY_ROI, TOP_5_BY_ROI,\
          \ TOP_10_BY_ROI, RANDOM"
        required: true
        type: "string"
        x-exportParamName: "PotDistributionType"
      - name: "potTraderId"
        in: "formData"
        description: "User ID of the guild member with order write permission for\
          \ the pot"
        required: false
        type: "number"
        format: "double"
        x-exportParamName: "PotTraderId"
        x-optionalDataType: "Float64"
      - name: "description"
        in: "formData"
        description: "Guild description, can be used to explain the guild to other\
          \ users."
        required: false
        type: "string"
        x-exportParamName: "Description"
        x-optionalDataType: "String"
      - name: "twitter"
        in: "formData"
        description: "Guild twitter handle."
        required: false
        type: "string"
        x-exportParamName: "Twitter"
        x-optionalDataType: "String"
      - name: "discord"
        in: "formData"
        description: "Guild discord link."
        required: false
        type: "string"
        x-exportParamName: "Discord"
        x-optionalDataType: "String"
      - name: "telegram"
        in: "formData"
        description: "Guild telegram link."
        required: false
        type: "string"
        x-exportParamName: "Telegram"
        x-optionalDataType: "String"
      - name: "imgUrl"
        in: "formData"
        description: "URL for the profile image of the guild, is used by clients to\
          \ add some color to the guild, if no image is provided, a default image\
          \ is used"
        required: false
        type: "string"
        x-exportParamName: "ImgUrl"
        x-optionalDataType: "String"
      - name: "isPrivate"
        in: "formData"
        description: "Guild privacy status"
        required: false
        type: "boolean"
        x-exportParamName: "IsPrivate"
        x-optionalDataType: "Bool"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Guild"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /guild/shareTrades:
    post:
      tags:
      - "Guild"
      summary: "Toggle share trades for your account, which controls whether your\
        \ guild members can see your orders and positions in their UI"
      operationId: "Guild.shareTrades"
      parameters:
      - name: "shareTrades"
        in: "formData"
        required: true
        type: "boolean"
        x-exportParamName: "ShareTrades"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /guild/leave:
    post:
      tags:
      - "Guild"
      summary: "Leave guild or cancel guild join request"
      operationId: "Guild.leave"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /guild/kick:
    post:
      tags:
      - "Guild"
      summary: "Kick member from guild"
      operationId: "Guild.kick"
      parameters:
      - name: "memberUserId"
        in: "formData"
        required: true
        type: "number"
        format: "double"
        x-exportParamName: "MemberUserId"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /guild/join:
    post:
      tags:
      - "Guild"
      summary: "Request to Join a private guild or join a public guild"
      operationId: "Guild.join"
      parameters:
      - name: "code"
        in: "formData"
        required: true
        type: "string"
        x-exportParamName: "Code"
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /guild/archive:
    post:
      tags:
      - "Guild"
      summary: "Archive a guild"
      operationId: "Guild.archive"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "object"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /porl/nonce:
    get:
      tags:
      - "Porl"
      summary: "Get your Proof of Reserves nonce and data."
      description: "## Proof of Reserves Nonce\n\nThis endpoint will return the nonce\
        \ and associated data needed to validate BitMEX reserves data.\n\n<!-- TODO\
        \ link to docs, GitHub, etc -->\n"
      operationId: "Porl.getNonce"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            $ref: "#/definitions/Porl"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
  /porl/snapshots:
    get:
      tags:
      - "Porl"
      summary: "Get Proof of Reserves historical snapshots"
      operationId: "Porl.getSnapshots"
      parameters: []
      security: []
      deprecated: false
      responses:
        "200":
          description: "Request was successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/x-any"
        "400":
          description: "Parameter Error"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
securityDefinitions:
  apiKey:
    type: "apiKey"
    name: "api-key"
    in: "header"
  apiSignature:
    type: "apiKey"
    name: "api-signature"
    in: "header"
  apiExpires:
    type: "apiKey"
    name: "api-expires"
    in: "header"
definitions:
  Announcement:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "number"
        format: "int32"
      link:
        type: "string"
      title:
        type: "string"
      content:
        type: "string"
      date:
        type: "string"
        format: "date-time"
    description: "Public Announcements"
    example:
      date: "2000-01-23T04:56:07.000+00:00"
      link: "link"
      id: 0.80082819046101150206595775671303272247314453125
      title: "title"
      content: "content"
  Error:
    type: "object"
    required:
    - "error"
    properties:
      error:
        $ref: "#/definitions/Error_error"
  APIKey:
    type: "object"
    required:
    - "id"
    - "name"
    - "nonce"
    - "secret"
    - "userId"
    properties:
      id:
        type: "string"
        maxLength: 24
      secret:
        type: "string"
        maxLength: 48
      name:
        type: "string"
        maxLength: 64
      nonce:
        type: "number"
        format: "int64"
      cidr:
        type: "string"
        maxLength: 18
      cidrs:
        type: "array"
        items:
          $ref: "#/definitions/x-any"
      targetAccountId:
        type: "number"
        format: "int32"
      permissions:
        type: "array"
        items:
          $ref: "#/definitions/x-any"
      enabled:
        type: "boolean"
        default: false
      userId:
        type: "number"
        format: "int32"
      created:
        type: "string"
        format: "date-time"
    description: "Persistent API Keys for Developers"
    example:
      targetAccountId: 6.02745618307040320615897144307382404804229736328125
      permissions:
      - null
      - null
      created: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      cidr: "cidr"
      id: "id"
      secret: "secret"
      cidrs:
      - {}
      - {}
      nonce: 0.80082819046101150206595775671303272247314453125
      userId: 1.46581298050294517310021547018550336360931396484375
      enabled: false
  PinnedMessage:
    type: "object"
    required:
    - "channelID"
    - "id"
    - "messageId"
    properties:
      id:
        type: "number"
        format: "int32"
      channelID:
        type: "number"
        format: "int32"
      messageId:
        type: "number"
        format: "int32"
      created:
        type: "string"
        format: "date-time"
      ended:
        type: "string"
        format: "date-time"
      createdUserId:
        type: "number"
        format: "double"
      endedUserId:
        type: "number"
        format: "double"
    description: "Pinned Messages"
    example:
      createdUserId: 5.962133916683182377482808078639209270477294921875
      created: "2000-01-23T04:56:07.000+00:00"
      ended: "2000-01-23T04:56:07.000+00:00"
      messageId: 1.46581298050294517310021547018550336360931396484375
      endedUserId: 5.63737665663332876420099637471139430999755859375
      id: 0.80082819046101150206595775671303272247314453125
      channelID: 6.02745618307040320615897144307382404804229736328125
  Chat:
    type: "object"
    required:
    - "date"
    - "html"
    - "message"
    - "user"
    properties:
      id:
        type: "number"
        format: "int32"
      date:
        type: "string"
        format: "date-time"
      user:
        type: "string"
      userColor:
        type: "string"
      message:
        type: "string"
      html:
        type: "string"
      channelID:
        type: "number"
        format: "double"
    description: "Trollbox Data"
    example:
      date: "2000-01-23T04:56:07.000+00:00"
      userColor: "userColor"
      html: "html"
      id: 0.80082819046101150206595775671303272247314453125
      message: "message"
      user: "user"
      channelID: 6.02745618307040320615897144307382404804229736328125
  ChatChannel:
    type: "object"
    required:
    - "isPrivate"
    - "name"
    properties:
      id:
        type: "number"
        format: "int32"
      name:
        type: "string"
      isPrivate:
        type: "boolean"
    example:
      name: "name"
      id: 0.80082819046101150206595775671303272247314453125
      isPrivate: true
  ConnectedUsers:
    type: "object"
    properties:
      users:
        type: "number"
        format: "int32"
      bots:
        type: "number"
        format: "int32"
    example:
      bots: 6.02745618307040320615897144307382404804229736328125
      users: 0.80082819046101150206595775671303272247314453125
  Execution:
    type: "object"
    required:
    - "symbol"
    - "timestamp"
    properties:
      execID:
        type: "string"
        format: "guid"
      orderID:
        type: "string"
        format: "guid"
      clOrdID:
        type: "string"
      clOrdLinkID:
        type: "string"
      account:
        type: "number"
        format: "int64"
      symbol:
        type: "string"
      side:
        type: "string"
      lastQty:
        type: "number"
        format: "int64"
      lastPx:
        type: "number"
        format: "double"
      lastLiquidityInd:
        type: "string"
      orderQty:
        type: "number"
        format: "int64"
      price:
        type: "number"
        format: "double"
      displayQty:
        type: "number"
        format: "int64"
      stopPx:
        type: "number"
        format: "double"
      pegOffsetValue:
        type: "number"
        format: "double"
      pegPriceType:
        type: "string"
      currency:
        type: "string"
      settlCurrency:
        type: "string"
      execType:
        type: "string"
      ordType:
        type: "string"
      timeInForce:
        type: "string"
      execInst:
        type: "string"
      contingencyType:
        type: "string"
      ordStatus:
        type: "string"
      triggered:
        type: "string"
      workingIndicator:
        type: "boolean"
      ordRejReason:
        type: "string"
      leavesQty:
        type: "number"
        format: "int64"
      cumQty:
        type: "number"
        format: "int64"
      avgPx:
        type: "number"
        format: "double"
      commission:
        type: "number"
        format: "double"
      feeType:
        type: "string"
      tradePublishIndicator:
        type: "string"
      text:
        type: "string"
      trdMatchID:
        type: "string"
        format: "guid"
      execCost:
        type: "number"
        format: "int64"
      execComm:
        type: "number"
        format: "int64"
      homeNotional:
        type: "number"
        format: "double"
      foreignNotional:
        type: "number"
        format: "double"
      transactTime:
        type: "string"
        format: "date-time"
      timestamp:
        type: "string"
        format: "date-time"
    description: "Raw Order and Balance Data"
    example:
      symbol: "symbol"
      triggered: "triggered"
      clOrdLinkID: "clOrdLinkID"
      execInst: "execInst"
      homeNotional: 1.489415909854170383397331534069962799549102783203125
      pegOffsetValue: 9.301444243932575517419536481611430644989013671875
      pegPriceType: "pegPriceType"
      execID: "execID"
      contingencyType: "contingencyType"
      foreignNotional: 6.8468526983526398765889098285697400569915771484375
      execCost: 1.231513536777255612975068288506008684635162353515625
      execComm: 1.024645700144157789424070870154537260532379150390625
      settlCurrency: "settlCurrency"
      ordRejReason: "ordRejReason"
      price: 5.63737665663332876420099637471139430999755859375
      trdMatchID: "trdMatchID"
      orderQty: 5.962133916683182377482808078639209270477294921875
      currency: "currency"
      commission: 7.3862819483858839220147274318151175975799560546875
      text: "text"
      execType: "execType"
      timeInForce: "timeInForce"
      timestamp: "2000-01-23T04:56:07.000+00:00"
      ordStatus: "ordStatus"
      side: "side"
      orderID: "orderID"
      lastPx: 1.46581298050294517310021547018550336360931396484375
      leavesQty: 3.61607674925191080461672754609026014804840087890625
      cumQty: 2.027123023002321833274663731572218239307403564453125
      tradePublishIndicator: "tradePublishIndicator"
      displayQty: 2.3021358869347654518833223846741020679473876953125
      feeType: "feeType"
      clOrdID: "clOrdID"
      lastQty: 6.02745618307040320615897144307382404804229736328125
      avgPx: 4.1456080298839363962315474054776132106781005859375
      workingIndicator: true
      lastLiquidityInd: "lastLiquidityInd"
      transactTime: "2000-01-23T04:56:07.000+00:00"
      account: 0.80082819046101150206595775671303272247314453125
      stopPx: 7.061401241503109105224211816675961017608642578125
      ordType: "ordType"
  x-any:
    type: "object"
  Funding:
    type: "object"
    required:
    - "symbol"
    - "timestamp"
    properties:
      timestamp:
        type: "string"
        format: "date-time"
      symbol:
        type: "string"
      fundingInterval:
        type: "string"
        format: "date-time"
      fundingRate:
        type: "number"
        format: "double"
      fundingRateDaily:
        type: "number"
        format: "double"
    description: "Swap Funding History"
    example:
      symbol: "symbol"
      fundingRateDaily: 6.02745618307040320615897144307382404804229736328125
      fundingInterval: "2000-01-23T04:56:07.000+00:00"
      timestamp: "2000-01-23T04:56:07.000+00:00"
      fundingRate: 0.80082819046101150206595775671303272247314453125
  Instrument:
    type: "object"
    required:
    - "symbol"
    properties:
      symbol:
        type: "string"
      rootSymbol:
        type: "string"
      state:
        type: "string"
      typ:
        type: "string"
      listing:
        type: "string"
        format: "date-time"
      front:
        type: "string"
        format: "date-time"
      expiry:
        type: "string"
        format: "date-time"
      settle:
        type: "string"
        format: "date-time"
      listedSettle:
        type: "string"
        format: "date-time"
      positionCurrency:
        type: "string"
      underlying:
        type: "string"
      quoteCurrency:
        type: "string"
      underlyingSymbol:
        type: "string"
      reference:
        type: "string"
      referenceSymbol:
        type: "string"
      calcInterval:
        type: "string"
        format: "date-time"
      publishInterval:
        type: "string"
        format: "date-time"
      publishTime:
        type: "string"
        format: "date-time"
      maxOrderQty:
        type: "number"
        format: "int64"
      maxPrice:
        type: "number"
        format: "double"
      lotSize:
        type: "number"
        format: "int64"
      tickSize:
        type: "number"
        format: "double"
      multiplier:
        type: "number"
        format: "int64"
      settlCurrency:
        type: "string"
      underlyingToPositionMultiplier:
        type: "number"
        format: "int64"
      underlyingToSettleMultiplier:
        type: "number"
        format: "int64"
      quoteToSettleMultiplier:
        type: "number"
        format: "int64"
      isQuanto:
        type: "boolean"
      isInverse:
        type: "boolean"
      initMargin:
        type: "number"
        format: "double"
      maintMargin:
        type: "number"
        format: "double"
      riskLimit:
        type: "number"
        format: "int64"
      riskStep:
        type: "number"
        format: "int64"
      limit:
        type: "number"
        format: "double"
      taxed:
        type: "boolean"
      deleverage:
        type: "boolean"
      makerFee:
        type: "number"
        format: "double"
      takerFee:
        type: "number"
        format: "double"
      settlementFee:
        type: "number"
        format: "double"
      fundingBaseSymbol:
        type: "string"
      fundingQuoteSymbol:
        type: "string"
      fundingPremiumSymbol:
        type: "string"
      fundingTimestamp:
        type: "string"
        format: "date-time"
      fundingInterval:
        type: "string"
        format: "date-time"
      fundingRate:
        type: "number"
        format: "double"
      indicativeFundingRate:
        type: "number"
        format: "double"
      rebalanceTimestamp:
        type: "string"
        format: "date-time"
      rebalanceInterval:
        type: "string"
        format: "date-time"
      prevClosePrice:
        type: "number"
        format: "double"
      limitDownPrice:
        type: "number"
        format: "double"
      limitUpPrice:
        type: "number"
        format: "double"
      totalVolume:
        type: "number"
        format: "int64"
      volume:
        type: "number"
        format: "int64"
      volume24h:
        type: "number"
        format: "int64"
      prevTotalTurnover:
        type: "number"
        format: "int64"
      totalTurnover:
        type: "number"
        format: "int64"
      turnover:
        type: "number"
        format: "int64"
      turnover24h:
        type: "number"
        format: "int64"
      homeNotional24h:
        type: "number"
        format: "double"
      foreignNotional24h:
        type: "number"
        format: "double"
      prevPrice24h:
        type: "number"
        format: "double"
      vwap:
        type: "number"
        format: "double"
      highPrice:
        type: "number"
        format: "double"
      lowPrice:
        type: "number"
        format: "double"
      lastPrice:
        type: "number"
        format: "double"
      lastPriceProtected:
        type: "number"
        format: "double"
      lastTickDirection:
        type: "string"
      lastChangePcnt:
        type: "number"
        format: "double"
      bidPrice:
        type: "number"
        format: "double"
      midPrice:
        type: "number"
        format: "double"
      askPrice:
        type: "number"
        format: "double"
      impactBidPrice:
        type: "number"
        format: "double"
      impactMidPrice:
        type: "number"
        format: "double"
      impactAskPrice:
        type: "number"
        format: "double"
      hasLiquidity:
        type: "boolean"
      openInterest:
        type: "number"
        format: "int64"
      openValue:
        type: "number"
        format: "int64"
      fairMethod:
        type: "string"
      fairBasisRate:
        type: "number"
        format: "double"
      fairBasis:
        type: "number"
        format: "double"
      fairPrice:
        type: "number"
        format: "double"
      markMethod:
        type: "string"
      markPrice:
        type: "number"
        format: "double"
      indicativeSettlePrice:
        type: "number"
        format: "double"
      settledPriceAdjustmentRate:
        type: "number"
        format: "double"
      settledPrice:
        type: "number"
        format: "double"
      instantPnl:
        type: "boolean"
      minTick:
        type: "number"
        format: "double"
      timestamp:
        type: "string"
        format: "date-time"
    description: "Tradeable Contracts, Indices, and History"
    example:
      totalVolume: 9.3693102714106686335071572102606296539306640625
      symbol: "symbol"
      listedSettle: "2000-01-23T04:56:07.000+00:00"
      vwap: 6.87805222012787620400331434211693704128265380859375
      typ: "typ"
      reference: "reference"
      deleverage: true
      prevTotalTurnover: 9.0183481860707832566959041287191212177276611328125
      riskLimit: 4.1456080298839363962315474054776132106781005859375
      fundingBaseSymbol: "fundingBaseSymbol"
      prevPrice24h: 6.77832496304801335185175048536621034145355224609375
      limit: 1.231513536777255612975068288506008684635162353515625
      highPrice: 5.94489560761401580890606055618263781070709228515625
      fairMethod: "fairMethod"
      taxed: true
      state: "state"
      expiry: "2000-01-23T04:56:07.000+00:00"
      fundingPremiumSymbol: "fundingPremiumSymbol"
      publishInterval: "2000-01-23T04:56:07.000+00:00"
      calcInterval: "2000-01-23T04:56:07.000+00:00"
      lastChangePcnt: 7.14353804701230643559028976596891880035400390625
      publishTime: "2000-01-23T04:56:07.000+00:00"
      askPrice: 6.51918095101838179772357761976309120655059814453125
      maintMargin: 2.027123023002321833274663731572218239307403564453125
      takerFee: 1.489415909854170383397331534069962799549102783203125
      multiplier: 5.63737665663332876420099637471139430999755859375
      fairBasis: 7.04836565559697003635619694250635802745819091796875
      volume24h: 8.7620420127490010742121739895083010196685791015625
      settlementFee: 6.8468526983526398765889098285697400569915771484375
      totalTurnover: 6.438423552598546706349225132726132869720458984375
      turnover24h: 6.96511769763884558415156789124011993408203125
      underlying: "underlying"
      quoteToSettleMultiplier: 9.301444243932575517419536481611430644989013671875
      fairPrice: 5.5332583970349862312332334113307297229766845703125
      bidPrice: 0.885137473901165261480628032586537301540374755859375
      fundingQuoteSymbol: "fundingQuoteSymbol"
      quoteCurrency: "quoteCurrency"
      volume: 6.683562403749608193948006373830139636993408203125
      impactMidPrice: 4.6523964329332461176136348512955009937286376953125
      indicativeSettlePrice: 4.078845849666752343409825698472559452056884765625
      settledPrice: 6.6284642750877420525057459599338471889495849609375
      maxOrderQty: 0.80082819046101150206595775671303272247314453125
      prevClosePrice: 4.9652184929849543237878606305457651615142822265625
      maxPrice: 6.02745618307040320615897144307382404804229736328125
      underlyingToPositionMultiplier: 2.3021358869347654518833223846741020679473876953125
      hasLiquidity: true
      openInterest: 7.7403518187411730622216055053286254405975341796875
      instantPnl: true
      riskStep: 7.3862819483858839220147274318151175975799560546875
      settle: "2000-01-23T04:56:07.000+00:00"
      isQuanto: true
      rootSymbol: "rootSymbol"
      tickSize: 5.962133916683182377482808078639209270477294921875
      markMethod: "markMethod"
      markPrice: 3.258856561904760695824734284542500972747802734375
      underlyingSymbol: "underlyingSymbol"
      fundingTimestamp: "2000-01-23T04:56:07.000+00:00"
      settlCurrency: "settlCurrency"
      makerFee: 1.024645700144157789424070870154537260532379150390625
      lowPrice: 6.70401929795003592715829654480330646038055419921875
      underlyingToSettleMultiplier: 7.061401241503109105224211816675961017608642578125
      fundingInterval: "2000-01-23T04:56:07.000+00:00"
      listing: "2000-01-23T04:56:07.000+00:00"
      indicativeFundingRate: 1.173074250955943309548956676735542714595794677734375
      turnover: 3.557195227068097320710649000830017030239105224609375
      positionCurrency: "positionCurrency"
      timestamp: "2000-01-23T04:56:07.000+00:00"
      impactAskPrice: 8.9695787981969115065794539987109601497650146484375
      referenceSymbol: "referenceSymbol"
      limitDownPrice: 5.02500479152029466689555192715488374233245849609375
      lastTickDirection: "lastTickDirection"
      homeNotional24h: 1.2846590061165319429647979632136411964893341064453125
      openValue: 3.02057969929162428712743349024094641208648681640625
      isInverse: true
      lotSize: 1.46581298050294517310021547018550336360931396484375
      minTick: 4.258773108174356281097061582840979099273681640625
      settledPriceAdjustmentRate: 0.202532411323639305322785730822943150997161865234375
      rebalanceTimestamp: "2000-01-23T04:56:07.000+00:00"
      fairBasisRate: 3.05761002410493443193217899533919990062713623046875
      lastPriceProtected: 3.093745262666447448651751983561553061008453369140625
      midPrice: 7.05877035158235610623478351044468581676483154296875
      foreignNotional24h: 2.884162126668780246063761296682059764862060546875
      impactBidPrice: 0.10263654006109401706225980888120830059051513671875
      initMargin: 3.61607674925191080461672754609026014804840087890625
      limitUpPrice: 9.965781217890562260208753286860883235931396484375
      front: "2000-01-23T04:56:07.000+00:00"
      rebalanceInterval: "2000-01-23T04:56:07.000+00:00"
      fundingRate: 7.4577447736837658709418974467553198337554931640625
      lastPrice: 3.35319334701124294184637619764544069766998291015625
  InstrumentInterval:
    type: "object"
    required:
    - "intervals"
    - "symbols"
    properties:
      intervals:
        type: "array"
        items:
          type: "string"
      symbols:
        type: "array"
        items:
          type: "string"
    example:
      intervals:
      - "intervals"
      - "intervals"
      symbols:
      - "symbols"
      - "symbols"
  IndexComposite:
    type: "object"
    required:
    - "timestamp"
    properties:
      timestamp:
        type: "string"
        format: "date-time"
      symbol:
        type: "string"
      indexSymbol:
        type: "string"
      indexMultiplier:
        type: "number"
        format: "double"
      reference:
        type: "string"
      lastPrice:
        type: "number"
        format: "double"
      sourcePrice:
        type: "number"
        format: "double"
      conversionIndex:
        type: "string"
      conversionIndexPrice:
        type: "number"
        format: "double"
      weight:
        type: "number"
        format: "double"
      logged:
        type: "string"
        format: "date-time"
    example:
      reference: "reference"
      conversionIndex: "conversionIndex"
      symbol: "symbol"
      indexSymbol: "indexSymbol"
      logged: "2000-01-23T04:56:07.000+00:00"
      conversionIndexPrice: 5.962133916683182377482808078639209270477294921875
      weight: 5.63737665663332876420099637471139430999755859375
      indexMultiplier: 0.80082819046101150206595775671303272247314453125
      sourcePrice: 1.46581298050294517310021547018550336360931396484375
      timestamp: "2000-01-23T04:56:07.000+00:00"
      lastPrice: 6.02745618307040320615897144307382404804229736328125
  StatsUSDBySymbol:
    type: "object"
    required:
    - "symbol"
    properties:
      symbol:
        type: "string"
      currency:
        type: "string"
      turnover24h:
        type: "number"
        format: "int64"
      turnover30d:
        type: "number"
        format: "int64"
      turnover365d:
        type: "number"
        format: "int64"
      turnover:
        type: "number"
        format: "int64"
    example:
      symbol: "symbol"
      turnover30d: 6.02745618307040320615897144307382404804229736328125
      turnover365d: 1.46581298050294517310021547018550336360931396484375
      currency: "currency"
      turnover24h: 0.80082819046101150206595775671303272247314453125
      turnover: 5.962133916683182377482808078639209270477294921875
  Insurance:
    type: "object"
    required:
    - "currency"
    - "timestamp"
    properties:
      currency:
        type: "string"
      timestamp:
        type: "string"
        format: "date-time"
      walletBalance:
        type: "number"
        format: "int64"
    description: "Insurance Fund Data"
    example:
      walletBalance: 0.80082819046101150206595775671303272247314453125
      currency: "currency"
      timestamp: "2000-01-23T04:56:07.000+00:00"
  Leaderboard:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
      isRealName:
        type: "boolean"
      profit:
        type: "number"
        format: "double"
    description: "Information on Top Users"
    example:
      name: "name"
      isRealName: true
      profit: 0.80082819046101150206595775671303272247314453125
  Liquidation:
    type: "object"
    required:
    - "orderID"
    properties:
      orderID:
        type: "string"
        format: "guid"
      symbol:
        type: "string"
      side:
        type: "string"
      price:
        type: "number"
        format: "double"
      leavesQty:
        type: "number"
        format: "int64"
    description: "Active Liquidations"
    example:
      symbol: "symbol"
      side: "side"
      orderID: "orderID"
      price: 0.80082819046101150206595775671303272247314453125
      leavesQty: 6.02745618307040320615897144307382404804229736328125
  GlobalNotification:
    type: "object"
    required:
    - "body"
    - "date"
    - "title"
    - "ttl"
    properties:
      id:
        type: "number"
        format: "int32"
      date:
        type: "string"
        format: "date-time"
      title:
        type: "string"
      body:
        type: "string"
      ttl:
        type: "number"
        format: "int32"
      type:
        type: "string"
        enum:
        - "success"
        - "error"
        - "info"
      closable:
        type: "boolean"
        default: true
      persist:
        type: "boolean"
        default: true
      waitForVisibility:
        type: "boolean"
        default: true
      sound:
        type: "string"
    description: "Account Notifications"
    example:
      date: "2000-01-23T04:56:07.000+00:00"
      waitForVisibility: true
      closable: true
      sound: "sound"
      id: 0.80082819046101150206595775671303272247314453125
      persist: true
      title: "title"
      body: "body"
      type: "success"
      ttl: 6.02745618307040320615897144307382404804229736328125
  Order:
    type: "object"
    required:
    - "orderID"
    properties:
      orderID:
        type: "string"
        format: "guid"
      clOrdID:
        type: "string"
      clOrdLinkID:
        type: "string"
      account:
        type: "number"
        format: "int64"
      symbol:
        type: "string"
      side:
        type: "string"
      orderQty:
        type: "number"
        format: "int64"
      price:
        type: "number"
        format: "double"
      displayQty:
        type: "number"
        format: "int64"
      stopPx:
        type: "number"
        format: "double"
      pegOffsetValue:
        type: "number"
        format: "double"
      pegPriceType:
        type: "string"
      currency:
        type: "string"
      settlCurrency:
        type: "string"
      ordType:
        type: "string"
      timeInForce:
        type: "string"
      execInst:
        type: "string"
      contingencyType:
        type: "string"
      ordStatus:
        type: "string"
      triggered:
        type: "string"
      workingIndicator:
        type: "boolean"
      ordRejReason:
        type: "string"
      leavesQty:
        type: "number"
        format: "int64"
      cumQty:
        type: "number"
        format: "int64"
      avgPx:
        type: "number"
        format: "double"
      text:
        type: "string"
      transactTime:
        type: "string"
        format: "date-time"
      timestamp:
        type: "string"
        format: "date-time"
    description: "Placement, Cancellation, Amending, and History"
    example:
      symbol: "symbol"
      triggered: "triggered"
      clOrdLinkID: "clOrdLinkID"
      execInst: "execInst"
      pegOffsetValue: 2.3021358869347654518833223846741020679473876953125
      pegPriceType: "pegPriceType"
      contingencyType: "contingencyType"
      settlCurrency: "settlCurrency"
      ordRejReason: "ordRejReason"
      price: 1.46581298050294517310021547018550336360931396484375
      orderQty: 6.02745618307040320615897144307382404804229736328125
      currency: "currency"
      text: "text"
      timeInForce: "timeInForce"
      timestamp: "2000-01-23T04:56:07.000+00:00"
      ordStatus: "ordStatus"
      side: "side"
      orderID: "orderID"
      leavesQty: 7.061401241503109105224211816675961017608642578125
      cumQty: 9.301444243932575517419536481611430644989013671875
      displayQty: 5.962133916683182377482808078639209270477294921875
      clOrdID: "clOrdID"
      avgPx: 3.61607674925191080461672754609026014804840087890625
      workingIndicator: true
      transactTime: "2000-01-23T04:56:07.000+00:00"
      account: 0.80082819046101150206595775671303272247314453125
      stopPx: 5.63737665663332876420099637471139430999755859375
      ordType: "ordType"
  OrderBookL2:
    type: "object"
    required:
    - "id"
    - "side"
    - "symbol"
    properties:
      symbol:
        type: "string"
      id:
        type: "number"
        format: "int64"
      side:
        type: "string"
      size:
        type: "number"
        format: "int64"
      price:
        type: "number"
        format: "double"
      timestamp:
        type: "string"
        format: "date-time"
    example:
      symbol: "symbol"
      side: "side"
      size: 6.02745618307040320615897144307382404804229736328125
      price: 1.46581298050294517310021547018550336360931396484375
      id: 0.80082819046101150206595775671303272247314453125
      timestamp: "2000-01-23T04:56:07.000+00:00"
  Position:
    type: "object"
    required:
    - "account"
    - "symbol"
    properties:
      account:
        type: "number"
        format: "int64"
      symbol:
        type: "string"
      currency:
        type: "string"
      underlying:
        type: "string"
      quoteCurrency:
        type: "string"
      commission:
        type: "number"
        format: "double"
        default: 0
      initMarginReq:
        type: "number"
        format: "double"
        default: 0
      maintMarginReq:
        type: "number"
        format: "double"
        default: 0
      riskLimit:
        type: "number"
        format: "int64"
      leverage:
        type: "number"
        format: "double"
        default: 0
      crossMargin:
        type: "boolean"
      deleveragePercentile:
        type: "number"
        format: "double"
        default: 0
      rebalancedPnl:
        type: "number"
        format: "int64"
      prevRealisedPnl:
        type: "number"
        format: "int64"
      prevUnrealisedPnl:
        type: "number"
        format: "int64"
      openingQty:
        type: "number"
        format: "int64"
      openOrderBuyQty:
        type: "number"
        format: "int64"
      openOrderBuyCost:
        type: "number"
        format: "int64"
      openOrderBuyPremium:
        type: "number"
        format: "int64"
      openOrderSellQty:
        type: "number"
        format: "int64"
      openOrderSellCost:
        type: "number"
        format: "int64"
      openOrderSellPremium:
        type: "number"
        format: "int64"
      currentQty:
        type: "number"
        format: "int64"
      currentCost:
        type: "number"
        format: "int64"
      currentComm:
        type: "number"
        format: "int64"
      realisedCost:
        type: "number"
        format: "int64"
      unrealisedCost:
        type: "number"
        format: "int64"
      grossOpenPremium:
        type: "number"
        format: "int64"
      isOpen:
        type: "boolean"
      markPrice:
        type: "number"
        format: "double"
        default: 0
      markValue:
        type: "number"
        format: "int64"
      riskValue:
        type: "number"
        format: "int64"
      homeNotional:
        type: "number"
        format: "double"
        default: 0
      foreignNotional:
        type: "number"
        format: "double"
        default: 0
      posState:
        type: "string"
      posCost:
        type: "number"
        format: "int64"
      posCross:
        type: "number"
        format: "int64"
      posComm:
        type: "number"
        format: "int64"
      posLoss:
        type: "number"
        format: "int64"
      posMargin:
        type: "number"
        format: "int64"
      posMaint:
        type: "number"
        format: "int64"
      initMargin:
        type: "number"
        format: "int64"
      maintMargin:
        type: "number"
        format: "int64"
      realisedPnl:
        type: "number"
        format: "int64"
      unrealisedPnl:
        type: "number"
        format: "int64"
      unrealisedPnlPcnt:
        type: "number"
        format: "double"
        default: 0
      unrealisedRoePcnt:
        type: "number"
        format: "double"
        default: 0
      avgCostPrice:
        type: "number"
        format: "double"
        default: 0
      avgEntryPrice:
        type: "number"
        format: "double"
        default: 0
      breakEvenPrice:
        type: "number"
        format: "double"
        default: 0
      marginCallPrice:
        type: "number"
        format: "double"
        default: 0
      liquidationPrice:
        type: "number"
        format: "double"
        default: 0
      bankruptPrice:
        type: "number"
        format: "double"
        default: 0
      timestamp:
        type: "string"
        format: "date-time"
    description: "Summary of Open and Closed Positions"
    example:
      symbol: "symbol"
      breakEvenPrice: 8.9695787981969115065794539987109601497650146484375
      avgCostPrice: 0.10263654006109401706225980888120830059051513671875
      posLoss: 6.87805222012787620400331434211693704128265380859375
      openOrderSellQty: 1.489415909854170383397331534069962799549102783203125
      avgEntryPrice: 4.6523964329332461176136348512955009937286376953125
      foreignNotional: 6.96511769763884558415156789124011993408203125
      riskLimit: 5.63737665663332876420099637471139430999755859375
      prevUnrealisedPnl: 2.027123023002321833274663731572218239307403564453125
      marginCallPrice: 7.7403518187411730622216055053286254405975341796875
      unrealisedCost: 9.3693102714106686335071572102606296539306640625
      posComm: 6.77832496304801335185175048536621034145355224609375
      posMaint: 6.70401929795003592715829654480330646038055419921875
      realisedCost: 9.965781217890562260208753286860883235931396484375
      maintMargin: 3.093745262666447448651751983561553061008453369140625
      riskValue: 6.438423552598546706349225132726132869720458984375
      grossOpenPremium: 6.683562403749608193948006373830139636993408203125
      currentCost: 4.9652184929849543237878606305457651615142822265625
      underlying: "underlying"
      quoteCurrency: "quoteCurrency"
      initMarginReq: 1.46581298050294517310021547018550336360931396484375
      isOpen: true
      posCross: 2.884162126668780246063761296682059764862060546875
      unrealisedPnlPcnt: 7.05877035158235610623478351044468581676483154296875
      leverage: 2.3021358869347654518833223846741020679473876953125
      posState: "posState"
      openOrderSellPremium: 7.4577447736837658709418974467553198337554931640625
      openingQty: 4.1456080298839363962315474054776132106781005859375
      homeNotional: 3.557195227068097320710649000830017030239105224609375
      liquidationPrice: 3.02057969929162428712743349024094641208648681640625
      openOrderBuyQty: 7.3862819483858839220147274318151175975799560546875
      unrealisedPnl: 0.885137473901165261480628032586537301540374755859375
      markPrice: 8.7620420127490010742121739895083010196685791015625
      posMargin: 5.94489560761401580890606055618263781070709228515625
      crossMargin: true
      deleveragePercentile: 7.061401241503109105224211816675961017608642578125
      openOrderBuyCost: 1.231513536777255612975068288506008684635162353515625
      posCost: 1.2846590061165319429647979632136411964893341064453125
      currency: "currency"
      commission: 6.02745618307040320615897144307382404804229736328125
      maintMarginReq: 5.962133916683182377482808078639209270477294921875
      bankruptPrice: 3.05761002410493443193217899533919990062713623046875
      openOrderSellCost: 6.8468526983526398765889098285697400569915771484375
      markValue: 9.0183481860707832566959041287191212177276611328125
      timestamp: "2000-01-23T04:56:07.000+00:00"
      realisedPnl: 7.14353804701230643559028976596891880035400390625
      rebalancedPnl: 9.301444243932575517419536481611430644989013671875
      openOrderBuyPremium: 1.024645700144157789424070870154537260532379150390625
      currentQty: 1.173074250955943309548956676735542714595794677734375
      currentComm: 5.02500479152029466689555192715488374233245849609375
      prevRealisedPnl: 3.61607674925191080461672754609026014804840087890625
      initMargin: 3.35319334701124294184637619764544069766998291015625
      unrealisedRoePcnt: 6.51918095101838179772357761976309120655059814453125
      account: 0.80082819046101150206595775671303272247314453125
  Quote:
    type: "object"
    required:
    - "symbol"
    - "timestamp"
    properties:
      timestamp:
        type: "string"
        format: "date-time"
      symbol:
        type: "string"
      bidSize:
        type: "number"
        format: "int64"
      bidPrice:
        type: "number"
        format: "double"
      askPrice:
        type: "number"
        format: "double"
      askSize:
        type: "number"
        format: "int64"
    description: "Best Bid/Offer Snapshots & Historical Bins"
    example:
      symbol: "symbol"
      askPrice: 1.46581298050294517310021547018550336360931396484375
      bidSize: 0.80082819046101150206595775671303272247314453125
      bidPrice: 6.02745618307040320615897144307382404804229736328125
      askSize: 5.962133916683182377482808078639209270477294921875
      timestamp: "2000-01-23T04:56:07.000+00:00"
  Settlement:
    type: "object"
    required:
    - "symbol"
    - "timestamp"
    properties:
      timestamp:
        type: "string"
        format: "date-time"
      symbol:
        type: "string"
      settlementType:
        type: "string"
      settledPrice:
        type: "number"
        format: "double"
      optionStrikePrice:
        type: "number"
        format: "double"
      optionUnderlyingPrice:
        type: "number"
        format: "double"
      bankrupt:
        type: "number"
        format: "int64"
      taxBase:
        type: "number"
        format: "int64"
      taxRate:
        type: "number"
        format: "double"
    description: "Historical Settlement Data"
    example:
      settlementType: "settlementType"
      symbol: "symbol"
      taxRate: 2.3021358869347654518833223846741020679473876953125
      optionStrikePrice: 6.02745618307040320615897144307382404804229736328125
      settledPrice: 0.80082819046101150206595775671303272247314453125
      optionUnderlyingPrice: 1.46581298050294517310021547018550336360931396484375
      bankrupt: 5.962133916683182377482808078639209270477294921875
      timestamp: "2000-01-23T04:56:07.000+00:00"
      taxBase: 5.63737665663332876420099637471139430999755859375
  Stats:
    type: "object"
    required:
    - "rootSymbol"
    properties:
      rootSymbol:
        type: "string"
      currency:
        type: "string"
      volume24h:
        type: "number"
        format: "int64"
      turnover24h:
        type: "number"
        format: "int64"
      openInterest:
        type: "number"
        format: "int64"
      openValue:
        type: "number"
        format: "int64"
    description: "Exchange Statistics"
    example:
      openInterest: 1.46581298050294517310021547018550336360931396484375
      openValue: 5.962133916683182377482808078639209270477294921875
      volume24h: 0.80082819046101150206595775671303272247314453125
      currency: "currency"
      turnover24h: 6.02745618307040320615897144307382404804229736328125
      rootSymbol: "rootSymbol"
  StatsHistory:
    type: "object"
    required:
    - "date"
    - "rootSymbol"
    properties:
      date:
        type: "string"
        format: "date-time"
      rootSymbol:
        type: "string"
      currency:
        type: "string"
      volume:
        type: "number"
        format: "int64"
      turnover:
        type: "number"
        format: "int64"
    example:
      date: "2000-01-23T04:56:07.000+00:00"
      volume: 0.80082819046101150206595775671303272247314453125
      currency: "currency"
      turnover: 6.02745618307040320615897144307382404804229736328125
      rootSymbol: "rootSymbol"
  StatsUSD:
    type: "object"
    required:
    - "rootSymbol"
    properties:
      rootSymbol:
        type: "string"
      currency:
        type: "string"
      turnover24h:
        type: "number"
        format: "int64"
      turnover30d:
        type: "number"
        format: "int64"
      turnover365d:
        type: "number"
        format: "int64"
      turnover:
        type: "number"
        format: "int64"
    example:
      turnover30d: 6.02745618307040320615897144307382404804229736328125
      turnover365d: 1.46581298050294517310021547018550336360931396484375
      currency: "currency"
      turnover24h: 0.80082819046101150206595775671303272247314453125
      turnover: 5.962133916683182377482808078639209270477294921875
      rootSymbol: "rootSymbol"
  Trade:
    type: "object"
    required:
    - "symbol"
    - "timestamp"
    properties:
      timestamp:
        type: "string"
        format: "date-time"
      symbol:
        type: "string"
      side:
        type: "string"
      size:
        type: "number"
        format: "int64"
      price:
        type: "number"
        format: "double"
      tickDirection:
        type: "string"
      trdMatchID:
        type: "string"
        format: "guid"
      grossValue:
        type: "number"
        format: "int64"
      homeNotional:
        type: "number"
        format: "double"
      foreignNotional:
        type: "number"
        format: "double"
      trdType:
        type: "string"
    description: "Individual & Bucketed Trades"
    example:
      foreignNotional: 5.63737665663332876420099637471139430999755859375
      symbol: "symbol"
      side: "side"
      tickDirection: "tickDirection"
      size: 0.80082819046101150206595775671303272247314453125
      trdType: "trdType"
      price: 6.02745618307040320615897144307382404804229736328125
      grossValue: 1.46581298050294517310021547018550336360931396484375
      trdMatchID: "trdMatchID"
      homeNotional: 5.962133916683182377482808078639209270477294921875
      timestamp: "2000-01-23T04:56:07.000+00:00"
  TradeBin:
    type: "object"
    required:
    - "symbol"
    - "timestamp"
    properties:
      timestamp:
        type: "string"
        format: "date-time"
      symbol:
        type: "string"
      open:
        type: "number"
        format: "double"
      high:
        type: "number"
        format: "double"
      low:
        type: "number"
        format: "double"
      close:
        type: "number"
        format: "double"
      trades:
        type: "number"
        format: "int64"
      volume:
        type: "number"
        format: "int64"
      vwap:
        type: "number"
        format: "double"
      lastSize:
        type: "number"
        format: "int64"
      turnover:
        type: "number"
        format: "int64"
      homeNotional:
        type: "number"
        format: "double"
      foreignNotional:
        type: "number"
        format: "double"
    example:
      symbol: "symbol"
      vwap: 7.061401241503109105224211816675961017608642578125
      trades: 5.63737665663332876420099637471139430999755859375
      homeNotional: 2.027123023002321833274663731572218239307403564453125
      volume: 2.3021358869347654518833223846741020679473876953125
      foreignNotional: 4.1456080298839363962315474054776132106781005859375
      high: 6.02745618307040320615897144307382404804229736328125
      low: 1.46581298050294517310021547018550336360931396484375
      lastSize: 9.301444243932575517419536481611430644989013671875
      close: 5.962133916683182377482808078639209270477294921875
      turnover: 3.61607674925191080461672754609026014804840087890625
      open: 0.80082819046101150206595775671303272247314453125
      timestamp: "2000-01-23T04:56:07.000+00:00"
  DepositAddress:
    type: "object"
    required:
    - "address"
    properties:
      address:
        type: "string"
      memo:
        type: "string"
    description: "Deposit Address"
    example:
      address: "address"
      memo: "memo"
  Wallet:
    type: "object"
    required:
    - "account"
    - "currency"
    properties:
      account:
        type: "number"
        format: "int64"
      currency:
        type: "string"
      deposited:
        type: "number"
        format: "int64"
      withdrawn:
        type: "number"
        format: "int64"
      transferIn:
        type: "number"
        format: "int64"
      transferOut:
        type: "number"
        format: "int64"
      amount:
        type: "number"
        format: "int64"
      pendingCredit:
        type: "number"
        format: "int64"
      pendingDebit:
        type: "number"
        format: "int64"
      confirmedDebit:
        type: "number"
        format: "int64"
      timestamp:
        type: "string"
        format: "date-time"
    description: "Assets and Networks Data"
    example:
      transferOut: 5.63737665663332876420099637471139430999755859375
      amount: 2.3021358869347654518833223846741020679473876953125
      pendingDebit: 9.301444243932575517419536481611430644989013671875
      confirmedDebit: 3.61607674925191080461672754609026014804840087890625
      deposited: 6.02745618307040320615897144307382404804229736328125
      withdrawn: 1.46581298050294517310021547018550336360931396484375
      currency: "currency"
      transferIn: 5.962133916683182377482808078639209270477294921875
      pendingCredit: 7.061401241503109105224211816675961017608642578125
      account: 0.80082819046101150206595775671303272247314453125
      timestamp: "2000-01-23T04:56:07.000+00:00"
  Transaction:
    type: "object"
    required:
    - "transactID"
    properties:
      transactID:
        type: "string"
        format: "guid"
      account:
        type: "number"
        format: "int64"
      currency:
        type: "string"
      network:
        type: "string"
      transactType:
        type: "string"
      amount:
        type: "number"
        format: "int64"
      fee:
        type: "number"
        format: "int64"
      transactStatus:
        type: "string"
      address:
        type: "string"
      tx:
        type: "string"
      text:
        type: "string"
      transactTime:
        type: "string"
        format: "date-time"
      timestamp:
        type: "string"
        format: "date-time"
      walletBalance:
        type: "number"
        format: "int64"
    example:
      amount: 6.02745618307040320615897144307382404804229736328125
      address: "address"
      tx: "tx"
      transactID: "transactID"
      fee: 1.46581298050294517310021547018550336360931396484375
      transactStatus: "transactStatus"
      network: "network"
      transactType: "transactType"
      walletBalance: 5.962133916683182377482808078639209270477294921875
      transactTime: "2000-01-23T04:56:07.000+00:00"
      currency: "currency"
      text: "text"
      account: 0.80082819046101150206595775671303272247314453125
      timestamp: "2000-01-23T04:56:07.000+00:00"
  WalletSummaryRecord:
    type: "object"
    required:
    - "account"
    properties:
      account:
        type: "number"
        format: "double"
      currency:
        type: "string"
        default: "XBt"
      transactType:
        type: "string"
      symbol:
        type: "string"
        default: "XBTUSD"
      amount:
        type: "number"
        format: "double"
        default: 0
      pendingDebit:
        type: "number"
        format: "double"
        default: 0
      realisedPnl:
        type: "number"
        format: "double"
        default: 0
      walletBalance:
        type: "number"
        format: "double"
        default: 0
      unrealisedPnl:
        type: "number"
        format: "double"
        default: 0
      marginBalance:
        type: "number"
        format: "double"
        default: 0
    example:
      realisedPnl: 5.962133916683182377482808078639209270477294921875
      unrealisedPnl: 2.3021358869347654518833223846741020679473876953125
      symbol: "XBTUSD"
      amount: 6.02745618307040320615897144307382404804229736328125
      pendingDebit: 1.46581298050294517310021547018550336360931396484375
      transactType: "transactType"
      walletBalance: 5.63737665663332876420099637471139430999755859375
      currency: "XBt"
      account: 0.80082819046101150206595775671303272247314453125
      marginBalance: 7.061401241503109105224211816675961017608642578125
  StakingRecord:
    type: "object"
    required:
    - "account"
    properties:
      account:
        type: "number"
        format: "double"
      amount:
        type: "number"
        format: "double"
      currency:
        type: "string"
        default: "XBt"
    description: "Get the current user staking amount in vertical format."
    example:
      amount: 6.02745618307040320615897144307382404804229736328125
      currency: "XBt"
      account: 0.80082819046101150206595775671303272247314453125
  AccessToken:
    type: "object"
    required:
    - "id"
    - "updated"
    properties:
      updated:
        type: "string"
        format: "date-time"
      authorizedAccounts:
        type: "object"
        properties: {}
      id:
        type: "string"
      ttl:
        type: "number"
        format: "double"
        description: "time to live in seconds (2 weeks by default)"
        default: 1209600
      created:
        type: "string"
        format: "date-time"
      userId:
        type: "number"
        format: "double"
    example:
      created: "2000-01-23T04:56:07.000+00:00"
      id: "id"
      updated: "2000-01-23T04:56:07.000+00:00"
      ttl: 0.80082819046101150206595775671303272247314453125
      userId: 6.02745618307040320615897144307382404804229736328125
      authorizedAccounts: "{}"
  Affiliate:
    type: "object"
    required:
    - "account"
    - "currency"
    properties:
      account:
        type: "number"
        format: "int64"
      currency:
        type: "string"
      prevPayout:
        type: "number"
        format: "int64"
      prevTurnover:
        type: "number"
        format: "int64"
      prevComm:
        type: "number"
        format: "int64"
      prevTimestamp:
        type: "string"
        format: "date-time"
      execTurnover:
        type: "number"
        format: "int64"
      execComm:
        type: "number"
        format: "int64"
      totalReferrals:
        type: "number"
        format: "int64"
      totalTurnover:
        type: "number"
        format: "int64"
      totalComm:
        type: "number"
        format: "int64"
      payoutPcnt:
        type: "number"
        format: "double"
      pendingPayout:
        type: "number"
        format: "int64"
      timestamp:
        type: "string"
        format: "date-time"
      referrerAccount:
        type: "number"
        format: "double"
      referralDiscount:
        type: "number"
        format: "double"
      affiliatePayout:
        type: "number"
        format: "double"
    example:
      referralDiscount: 1.231513536777255612975068288506008684635162353515625
      execTurnover: 5.63737665663332876420099637471139430999755859375
      totalTurnover: 9.301444243932575517419536481611430644989013671875
      referrerAccount: 7.3862819483858839220147274318151175975799560546875
      execComm: 2.3021358869347654518833223846741020679473876953125
      totalReferrals: 7.061401241503109105224211816675961017608642578125
      currency: "currency"
      pendingPayout: 4.1456080298839363962315474054776132106781005859375
      prevPayout: 6.02745618307040320615897144307382404804229736328125
      prevComm: 5.962133916683182377482808078639209270477294921875
      prevTimestamp: "2000-01-23T04:56:07.000+00:00"
      account: 0.80082819046101150206595775671303272247314453125
      prevTurnover: 1.46581298050294517310021547018550336360931396484375
      totalComm: 3.61607674925191080461672754609026014804840087890625
      payoutPcnt: 2.027123023002321833274663731572218239307403564453125
      timestamp: "2000-01-23T04:56:07.000+00:00"
      affiliatePayout: 1.024645700144157789424070870154537260532379150390625
  QuoteFillRatio:
    type: "object"
    required:
    - "date"
    properties:
      date:
        type: "string"
        format: "date-time"
      account:
        type: "number"
        format: "double"
      quoteCount:
        type: "number"
        format: "double"
      dealtCount:
        type: "number"
        format: "double"
      quotesMavg7:
        type: "number"
        format: "double"
      dealtMavg7:
        type: "number"
        format: "double"
      quoteFillRatioMavg7:
        type: "number"
        format: "double"
    description: "Daily Quote Fill Ratio Statistic"
    example:
      date: "2000-01-23T04:56:07.000+00:00"
      quoteCount: 6.02745618307040320615897144307382404804229736328125
      quoteFillRatioMavg7: 2.3021358869347654518833223846741020679473876953125
      dealtMavg7: 5.63737665663332876420099637471139430999755859375
      account: 0.80082819046101150206595775671303272247314453125
      dealtCount: 1.46581298050294517310021547018550336360931396484375
      quotesMavg7: 5.962133916683182377482808078639209270477294921875
  QuoteValueRatio:
    type: "object"
    properties:
      timestamp:
        type: "string"
        format: "date-time"
      account:
        type: "number"
        format: "double"
      symbol:
        type: "string"
      quoteCount:
        type: "number"
        format: "double"
      volumeXBT:
        type: "number"
        format: "double"
      QVR:
        type: "number"
        format: "double"
      id:
        type: "number"
        format: "double"
    description: "Hourly Quote Value Ratio Statistic"
    example:
      symbol: "symbol"
      volumeXBT: 1.46581298050294517310021547018550336360931396484375
      quoteCount: 6.02745618307040320615897144307382404804229736328125
      id: 5.63737665663332876420099637471139430999755859375
      QVR: 5.962133916683182377482808078639209270477294921875
      account: 0.80082819046101150206595775671303272247314453125
      timestamp: "2000-01-23T04:56:07.000+00:00"
  TradingVolume:
    type: "object"
    required:
    - "advUsd"
    properties:
      advUsd:
        type: "number"
        format: "double"
      advUsdSpot:
        type: "number"
        format: "double"
      advUsdContract:
        type: "number"
        format: "double"
    description: "30 days USD average trading volume"
    example:
      advUsdSpot: 6.02745618307040320615897144307382404804229736328125
      advUsdContract: 1.46581298050294517310021547018550336360931396484375
      advUsd: 0.80082819046101150206595775671303272247314453125
  User:
    type: "object"
    required:
    - "isUser"
    - "username"
    properties:
      id:
        type: "number"
        format: "int32"
      firstname:
        type: "string"
      lastname:
        type: "string"
      username:
        type: "string"
      accountName:
        type: "string"
      isUser:
        type: "boolean"
        default: true
      email:
        type: "string"
      dateOfBirth:
        type: "string"
      phone:
        type: "string"
      created:
        type: "string"
        format: "date-time"
      lastUpdated:
        type: "string"
        format: "date-time"
      preferences:
        $ref: "#/definitions/UserPreferences"
      TFAEnabled:
        type: "string"
      affiliateID:
        type: "string"
        maxLength: 6
      country:
        type: "string"
        maxLength: 3
      geoipCountry:
        type: "string"
        maxLength: 2
      geoipRegion:
        type: "string"
        maxLength: 2
      firstTradeTimestamp:
        type: "string"
        format: "date-time"
      firstDepositTimestamp:
        type: "string"
        format: "date-time"
      typ:
        type: "string"
    description: "Account Operations"
    example:
      geoipRegion: "geoipRegion"
      country: "country"
      firstname: "firstname"
      preferences:
        isWalletZeroBalanceHidden: true
        favourites:
        - "favourites"
        - "favourites"
        disablePush:
        - "disablePush"
        - "disablePush"
        alertOnLiquidations: true
        optionsBeta: true
        hideConfirmDialogs:
        - "hideConfirmDialogs"
        - "hideConfirmDialogs"
        marginPnlRow: "marginPnlRow"
        isSensitiveInfoVisible: true
        features:
        - "features"
        - "features"
        favouriteContracts:
        - "favouriteContracts"
        - "favouriteContracts"
        spacingPreference: "spacingPreference"
        colorTheme: "colorTheme"
        favouritesOrdered:
        - "favouritesOrdered"
        - "favouritesOrdered"
        orderBookBinning: "{}"
        favouritesAssets:
        - "favouritesAssets"
        - "favouritesAssets"
        hidePnlInGuilds: false
        msgsSeen:
        - "msgsSeen"
        - "msgsSeen"
        orderControlsPlusMinus: true
        showChartBottomToolbar: true
        hasSetTradingCurrencies: true
        tickerPinned: true
        hideFromLeaderboard: false
        favouriteBots:
        - "favouriteBots"
        - "favouriteBots"
        orderBookType: "orderBookType"
        showLocaleNumbers: true
        chatChannelID: 6.02745618307040320615897144307382404804229736328125
        notifications: "{}"
        marginPnlRowKind: "marginPnlRowKind"
        hideNotifications:
        - "hideNotifications"
        - "hideNotifications"
        localeSetTime: 5.962133916683182377482808078639209270477294921875
        tickerGroup: "tickerGroup"
        platformLayout: "platformLayout"
        animationsEnabled: true
        guidesShownVersion: 1.46581298050294517310021547018550336360931396484375
        locale: "en-US"
        disableEmails:
        - "disableEmails"
        - "disableEmails"
        sounds:
        - "sounds"
        - "sounds"
        hidePhoneConfirm: false
        mobileLocale: "mobileLocale"
        hideRoiInGuilds: false
        currency: "currency"
        hideNameFromLeaderboard: false
        tradeLayout: "tradeLayout"
        strictTimeout: true
        debug: true
        strictIPCheck: false
        hideConnectionModal: true
        equivalentCurrency: "equivalentCurrency"
        displayCorpEnrollUpsell: true
        userColor: "userColor"
        announcementsLastSeen: "2000-01-23T04:56:07.000+00:00"
        orderClearImmediate: false
        selectedFiatCurrency: "selectedFiatCurrency"
      accountName: "accountName"
      created: "2000-01-23T04:56:07.000+00:00"
      dateOfBirth: "dateOfBirth"
      typ: "typ"
      firstTradeTimestamp: "2000-01-23T04:56:07.000+00:00"
      affiliateID: "affiliateID"
      lastname: "lastname"
      geoipCountry: "geoipCountry"
      firstDepositTimestamp: "2000-01-23T04:56:07.000+00:00"
      lastUpdated: "2000-01-23T04:56:07.000+00:00"
      phone: "phone"
      TFAEnabled: "TFAEnabled"
      id: 0.80082819046101150206595775671303272247314453125
      isUser: true
      email: "email"
      username: "username"
  UserCommissionsBySymbol:
    type: "object"
  Margin:
    type: "object"
    required:
    - "account"
    - "currency"
    properties:
      account:
        type: "number"
        format: "int64"
      currency:
        type: "string"
      riskLimit:
        type: "number"
        format: "int64"
      state:
        type: "string"
      amount:
        type: "number"
        format: "int64"
      prevRealisedPnl:
        type: "number"
        format: "int64"
      grossComm:
        type: "number"
        format: "int64"
      grossOpenCost:
        type: "number"
        format: "int64"
      grossOpenPremium:
        type: "number"
        format: "int64"
      grossExecCost:
        type: "number"
        format: "int64"
      grossMarkValue:
        type: "number"
        format: "int64"
      riskValue:
        type: "number"
        format: "int64"
      initMargin:
        type: "number"
        format: "int64"
      maintMargin:
        type: "number"
        format: "int64"
      targetExcessMargin:
        type: "number"
        format: "int64"
      realisedPnl:
        type: "number"
        format: "int64"
      unrealisedPnl:
        type: "number"
        format: "int64"
      walletBalance:
        type: "number"
        format: "int64"
      marginBalance:
        type: "number"
        format: "int64"
      marginLeverage:
        type: "number"
        format: "double"
        default: 0
      marginUsedPcnt:
        type: "number"
        format: "double"
        default: 0
      excessMargin:
        type: "number"
        format: "int64"
      availableMargin:
        type: "number"
        format: "int64"
      withdrawableMargin:
        type: "number"
        format: "int64"
      makerFeeDiscount:
        type: "number"
        format: "double"
        default: 0
      takerFeeDiscount:
        type: "number"
        format: "double"
        default: 0
      timestamp:
        type: "string"
        format: "date-time"
    example:
      grossMarkValue: 3.61607674925191080461672754609026014804840087890625
      marginUsedPcnt: 4.9652184929849543237878606305457651615142822265625
      marginLeverage: 1.173074250955943309548956676735542714595794677734375
      unrealisedPnl: 1.489415909854170383397331534069962799549102783203125
      riskLimit: 6.02745618307040320615897144307382404804229736328125
      walletBalance: 6.8468526983526398765889098285697400569915771484375
      currency: "currency"
      state: "state"
      marginBalance: 7.4577447736837658709418974467553198337554931640625
      timestamp: "2000-01-23T04:56:07.000+00:00"
      grossExecCost: 9.301444243932575517419536481611430644989013671875
      targetExcessMargin: 1.231513536777255612975068288506008684635162353515625
      realisedPnl: 1.024645700144157789424070870154537260532379150390625
      amount: 1.46581298050294517310021547018550336360931396484375
      maintMargin: 7.3862819483858839220147274318151175975799560546875
      riskValue: 2.027123023002321833274663731572218239307403564453125
      grossComm: 5.63737665663332876420099637471139430999755859375
      grossOpenPremium: 7.061401241503109105224211816675961017608642578125
      makerFeeDiscount: 6.683562403749608193948006373830139636993408203125
      withdrawableMargin: 9.3693102714106686335071572102606296539306640625
      grossOpenCost: 2.3021358869347654518833223846741020679473876953125
      prevRealisedPnl: 5.962133916683182377482808078639209270477294921875
      excessMargin: 5.02500479152029466689555192715488374233245849609375
      initMargin: 4.1456080298839363962315474054776132106781005859375
      takerFeeDiscount: 8.7620420127490010742121739895083010196685791015625
      account: 0.80082819046101150206595775671303272247314453125
      availableMargin: 9.965781217890562260208753286860883235931396484375
  CollateralSupportAgreement:
    type: "object"
    required:
    - "csaID"
    properties:
      csaID:
        type: "string"
      account:
        type: "number"
        format: "int64"
      currency:
        type: "string"
      amount:
        type: "number"
        format: "int64"
      minAmount:
        type: "number"
        format: "int64"
      threshold:
        type: "number"
        format: "int64"
      mmRatioMarginCall:
        type: "number"
        format: "int64"
      mmRatioLiquidation:
        type: "number"
        format: "int64"
      startTime:
        type: "string"
      maturityTime:
        type: "string"
      maturityInstruction:
        type: "string"
      csaStatus:
        type: "string"
      requester:
        type: "string"
      clientDetails:
        type: "string"
      text:
        type: "string"
      timestamp:
        type: "string"
    example:
      requester: "requester"
      minAmount: 1.46581298050294517310021547018550336360931396484375
      amount: 6.02745618307040320615897144307382404804229736328125
      csaID: "csaID"
      maturityInstruction: "maturityInstruction"
      threshold: 5.962133916683182377482808078639209270477294921875
      maturityTime: "maturityTime"
      csaStatus: "csaStatus"
      clientDetails: "clientDetails"
      currency: "currency"
      mmRatioMarginCall: 5.63737665663332876420099637471139430999755859375
      startTime: "startTime"
      text: "text"
      mmRatioLiquidation: 2.3021358869347654518833223846741020679473876953125
      account: 0.80082819046101150206595775671303272247314453125
      timestamp: "timestamp"
  CommunicationToken:
    type: "object"
    required:
    - "channel"
    - "deviceToken"
    - "id"
    - "userId"
    properties:
      id:
        type: "string"
      userId:
        type: "number"
        format: "int32"
      deviceToken:
        type: "string"
      channel:
        type: "string"
    description: "User communication SNS token"
    example:
      channel: "channel"
      id: "id"
      userId: 0.80082819046101150206595775671303272247314453125
      deviceToken: "deviceToken"
  UserEvent:
    type: "object"
    required:
    - "created"
    - "createdById"
    - "status"
    - "type"
    - "userId"
    properties:
      id:
        type: "number"
        format: "double"
      type:
        type: "string"
        enum:
        - "apiKeyCreated"
        - "deleverageExecution"
        - "depositConfirmed"
        - "depositPending"
        - "banZeroVolumeApiUser"
        - "liquidationOrderPlaced"
        - "login"
        - "existingAccountRegistrationAttempt"
        - "passwordChanged"
        - "positionStateLiquidated"
        - "positionStateWarning"
        - "resetPasswordConfirmed"
        - "resetPasswordRequest"
        - "tradingBotStopped"
        - "transferCanceled"
        - "transferCompleted"
        - "transferReceived"
        - "transferRequested"
        - "twoFactorDisabled"
        - "twoFactorEnabled"
        - "withdrawalCanceled"
        - "withdrawalCompleted"
        - "withdrawalConfirmed"
        - "withdrawalRequested"
        - "addressSkipConfirmRequested"
        - "addressSkipConfirmVerified"
        - "verify"
        - "restrictedAccount"
        - "unrestrictedAccount"
        - "disabledAccount"
        - "enabledAccount"
        - "role:roleMappingDestroy"
        - "role:chatBanned"
        - "role:withdrawalBanned"
        - "role:orderBanned"
        - "role:apiBanned"
        - "role:restrictedJurisdictionPrivilege"
      status:
        type: "string"
        enum:
        - "success"
        - "failure"
      userId:
        type: "number"
        format: "double"
      createdById:
        type: "number"
        format: "double"
      ip:
        type: "string"
      geoipCountry:
        type: "string"
        maxLength: 2
      geoipRegion:
        type: "string"
        maxLength: 3
      geoipSubRegion:
        type: "string"
        maxLength: 3
      eventMeta:
        type: "object"
        properties: {}
      created:
        type: "string"
        format: "date-time"
    description: "User Events for Auditing"
    example:
      geoipRegion: "geoipRegion"
      geoipSubRegion: "geoipSubRegion"
      eventMeta: "{}"
      created: "2000-01-23T04:56:07.000+00:00"
      ip: "ip"
      id: 0.80082819046101150206595775671303272247314453125
      type: "apiKeyCreated"
      userId: 6.02745618307040320615897144307382404804229736328125
      createdById: 1.46581298050294517310021547018550336360931396484375
      status: "success"
      geoipCountry: "geoipCountry"
  AssetsConfig:
    type: "object"
    required:
    - "asset"
    properties:
      asset:
        type: "string"
        default: "XBT"
      currency:
        type: "string"
        default: "XBt"
      majorCurrency:
        type: "string"
        default: "XBT"
      name:
        type: "string"
        default: "Bitcoin"
      currencyType:
        type: "string"
        default: "Crypto"
      scale:
        type: "number"
        format: "double"
        default: 8
      enabled:
        type: "boolean"
        default: true
      isMarginCurrency:
        type: "boolean"
        default: true
      memoRequired:
        type: "boolean"
        default: false
      networks:
        type: "array"
        items:
          $ref: "#/definitions/AssetsConfigNetworkItem"
    example:
      currencyType: "Crypto"
      memoRequired: false
      isMarginCurrency: true
      name: "Bitcoin"
      majorCurrency: "XBT"
      scale: 0.80082819046101150206595775671303272247314453125
      currency: "XBt"
      asset: "XBT"
      networks:
      - tokenAddress: "tokenAddress"
        withdrawalFee: 6.02745618307040320615897144307382404804229736328125
        depositEnabled: true
        withdrawalEnabled: true
        asset: "BTC"
        maxFee: 5.962133916683182377482808078639209270477294921875
        minFee: 1.46581298050294517310021547018550336360931396484375
      - tokenAddress: "tokenAddress"
        withdrawalFee: 6.02745618307040320615897144307382404804229736328125
        depositEnabled: true
        withdrawalEnabled: true
        asset: "BTC"
        maxFee: 5.962133916683182377482808078639209270477294921875
        minFee: 1.46581298050294517310021547018550336360931396484375
      enabled: true
  NetworksConfig:
    type: "object"
    required:
    - "network"
    properties:
      network:
        type: "string"
        default: "eth"
      name:
        type: "string"
        default: "Ethereum"
      currency:
        type: "string"
        default: "Gwei"
      networkSymbol:
        type: "string"
        default: "ETH"
      transactionExplorer:
        type: "string"
        default: "https://etherscan.io/tx/"
      tokenExplorer:
        type: "string"
        default: "https://etherscan.io/token/"
      depositConfirmations:
        type: "number"
        format: "int32"
      enabled:
        type: "boolean"
        default: true
    example:
      depositConfirmations: 0.80082819046101150206595775671303272247314453125
      networkSymbol: "ETH"
      transactionExplorer: "https://etherscan.io/tx/"
      tokenExplorer: "https://etherscan.io/token/"
      name: "Ethereum"
      currency: "Gwei"
      enabled: true
      network: "eth"
  Address:
    type: "object"
    required:
    - "address"
    - "name"
    - "network"
    properties:
      id:
        type: "number"
        format: "int32"
      currency:
        type: "string"
      created:
        type: "string"
        format: "date-time"
      userId:
        type: "number"
        format: "double"
      address:
        type: "string"
      name:
        type: "string"
      note:
        type: "string"
      skipConfirm:
        type: "boolean"
      skipConfirmVerified:
        type: "boolean"
      skip2FA:
        type: "boolean"
      skip2FAVerified:
        type: "boolean"
      network:
        type: "string"
      memo:
        type: "string"
    example:
      note: "note"
      skipConfirmVerified: true
      skip2FAVerified: true
      address: "address"
      created: "2000-01-23T04:56:07.000+00:00"
      memo: "memo"
      skipConfirm: true
      userId: 6.02745618307040320615897144307382404804229736328125
      network: "network"
      skip2FA: true
      name: "name"
      currency: "currency"
      id: 0.80082819046101150206595775671303272247314453125
  Guild:
    type: "object"
    required:
    - "chatChannelId"
    - "created"
    - "isPrivate"
    - "name"
    - "updated"
    properties:
      id:
        type: "number"
        format: "int32"
      created:
        type: "string"
        format: "date-time"
      updated:
        type: "string"
        format: "date-time"
      archived:
        type: "boolean"
      name:
        type: "string"
      imgUrl:
        type: "string"
      mobileHeroImgUrl:
        type: "string"
      emoji:
        type: "string"
      logoUrl:
        type: "string"
      description:
        type: "string"
      chatChannelId:
        type: "number"
        format: "double"
      isPrivate:
        type: "boolean"
      affiliateId:
        type: "string"
      potDistributionPreferences:
        type: "object"
        properties: {}
      socials:
        type: "object"
        properties: {}
      deleted:
        type: "boolean"
    example:
      emoji: "emoji"
      created: "2000-01-23T04:56:07.000+00:00"
      description: "description"
      isPrivate: true
      affiliateId: "affiliateId"
      logoUrl: "logoUrl"
      imgUrl: "imgUrl"
      archived: true
      deleted: true
      name: "name"
      mobileHeroImgUrl: "mobileHeroImgUrl"
      id: 0.80082819046101150206595775671303272247314453125
      socials: "{}"
      updated: "2000-01-23T04:56:07.000+00:00"
      chatChannelId: 6.02745618307040320615897144307382404804229736328125
      potDistributionPreferences: "{}"
  Porl:
    type: "object"
    required:
    - "account"
    - "accountNonce"
    - "balance"
    - "created"
    - "height"
    - "total"
    properties:
      account:
        type: "number"
        format: "int32"
      nonce:
        type: "string"
      accountNonce:
        type: "string"
      total:
        type: "number"
        format: "double"
      balance:
        type: "number"
        format: "double"
      filename:
        type: "string"
      height:
        type: "number"
        format: "double"
      created:
        type: "string"
        format: "date-time"
    description: "Proof of Reserves/Liabilities"
    example:
      total: 6.02745618307040320615897144307382404804229736328125
      filename: "filename"
      balance: 1.46581298050294517310021547018550336360931396484375
      created: "2000-01-23T04:56:07.000+00:00"
      nonce: "nonce"
      account: 0.80082819046101150206595775671303272247314453125
      accountNonce: "accountNonce"
      height: 5.962133916683182377482808078639209270477294921875
  UserPreferences:
    type: "object"
    properties:
      alertOnLiquidations:
        type: "boolean"
      animationsEnabled:
        type: "boolean"
      announcementsLastSeen:
        type: "string"
        format: "date-time"
      chatChannelID:
        type: "number"
        format: "double"
      colorTheme:
        type: "string"
      currency:
        type: "string"
      debug:
        type: "boolean"
      disableEmails:
        type: "array"
        items:
          type: "string"
      disablePush:
        type: "array"
        items:
          type: "string"
      displayCorpEnrollUpsell:
        type: "boolean"
      equivalentCurrency:
        type: "string"
      features:
        type: "array"
        items:
          type: "string"
      favourites:
        type: "array"
        items:
          type: "string"
      favouritesAssets:
        type: "array"
        items:
          type: "string"
      favouritesOrdered:
        type: "array"
        items:
          type: "string"
      favouriteBots:
        type: "array"
        items:
          type: "string"
      favouriteContracts:
        type: "array"
        items:
          type: "string"
      hasSetTradingCurrencies:
        type: "boolean"
      hideConfirmDialogs:
        type: "array"
        items:
          type: "string"
      hideConnectionModal:
        type: "boolean"
      hideFromLeaderboard:
        type: "boolean"
        default: false
      hideNameFromLeaderboard:
        type: "boolean"
        default: false
      hidePnlInGuilds:
        type: "boolean"
        default: false
      hideRoiInGuilds:
        type: "boolean"
        default: false
      hideNotifications:
        type: "array"
        items:
          type: "string"
      hidePhoneConfirm:
        type: "boolean"
        default: false
      guidesShownVersion:
        type: "number"
        format: "int32"
      isSensitiveInfoVisible:
        type: "boolean"
      isWalletZeroBalanceHidden:
        type: "boolean"
      locale:
        type: "string"
        default: "en-US"
      localeSetTime:
        type: "number"
        format: "double"
      marginPnlRow:
        type: "string"
      marginPnlRowKind:
        type: "string"
      mobileLocale:
        type: "string"
      msgsSeen:
        type: "array"
        items:
          type: "string"
      notifications:
        type: "object"
        properties: {}
      optionsBeta:
        type: "boolean"
      orderBookBinning:
        type: "object"
        properties: {}
      orderBookType:
        type: "string"
      orderClearImmediate:
        type: "boolean"
        default: false
      orderControlsPlusMinus:
        type: "boolean"
      platformLayout:
        type: "string"
      selectedFiatCurrency:
        type: "string"
      showChartBottomToolbar:
        type: "boolean"
      showLocaleNumbers:
        type: "boolean"
        default: true
      sounds:
        type: "array"
        items:
          type: "string"
      spacingPreference:
        type: "string"
      strictIPCheck:
        type: "boolean"
        default: false
      strictTimeout:
        type: "boolean"
        default: true
      tickerGroup:
        type: "string"
      tickerPinned:
        type: "boolean"
      tradeLayout:
        type: "string"
      userColor:
        type: "string"
    example:
      isWalletZeroBalanceHidden: true
      favourites:
      - "favourites"
      - "favourites"
      disablePush:
      - "disablePush"
      - "disablePush"
      alertOnLiquidations: true
      optionsBeta: true
      hideConfirmDialogs:
      - "hideConfirmDialogs"
      - "hideConfirmDialogs"
      marginPnlRow: "marginPnlRow"
      isSensitiveInfoVisible: true
      features:
      - "features"
      - "features"
      favouriteContracts:
      - "favouriteContracts"
      - "favouriteContracts"
      spacingPreference: "spacingPreference"
      colorTheme: "colorTheme"
      favouritesOrdered:
      - "favouritesOrdered"
      - "favouritesOrdered"
      orderBookBinning: "{}"
      favouritesAssets:
      - "favouritesAssets"
      - "favouritesAssets"
      hidePnlInGuilds: false
      msgsSeen:
      - "msgsSeen"
      - "msgsSeen"
      orderControlsPlusMinus: true
      showChartBottomToolbar: true
      hasSetTradingCurrencies: true
      tickerPinned: true
      hideFromLeaderboard: false
      favouriteBots:
      - "favouriteBots"
      - "favouriteBots"
      orderBookType: "orderBookType"
      showLocaleNumbers: true
      chatChannelID: 6.02745618307040320615897144307382404804229736328125
      notifications: "{}"
      marginPnlRowKind: "marginPnlRowKind"
      hideNotifications:
      - "hideNotifications"
      - "hideNotifications"
      localeSetTime: 5.962133916683182377482808078639209270477294921875
      tickerGroup: "tickerGroup"
      platformLayout: "platformLayout"
      animationsEnabled: true
      guidesShownVersion: 1.46581298050294517310021547018550336360931396484375
      locale: "en-US"
      disableEmails:
      - "disableEmails"
      - "disableEmails"
      sounds:
      - "sounds"
      - "sounds"
      hidePhoneConfirm: false
      mobileLocale: "mobileLocale"
      hideRoiInGuilds: false
      currency: "currency"
      hideNameFromLeaderboard: false
      tradeLayout: "tradeLayout"
      strictTimeout: true
      debug: true
      strictIPCheck: false
      hideConnectionModal: true
      equivalentCurrency: "equivalentCurrency"
      displayCorpEnrollUpsell: true
      userColor: "userColor"
      announcementsLastSeen: "2000-01-23T04:56:07.000+00:00"
      orderClearImmediate: false
      selectedFiatCurrency: "selectedFiatCurrency"
  AssetsConfigNetworkItem:
    type: "object"
    required:
    - "asset"
    properties:
      asset:
        type: "string"
        default: "BTC"
      tokenAddress:
        type: "string"
        default: ""
      depositEnabled:
        type: "boolean"
        default: true
      withdrawalEnabled:
        type: "boolean"
        default: true
      withdrawalFee:
        type: "number"
        format: "double"
      minFee:
        type: "number"
        format: "double"
      maxFee:
        type: "number"
        format: "double"
    example:
      tokenAddress: "tokenAddress"
      withdrawalFee: 6.02745618307040320615897144307382404804229736328125
      depositEnabled: true
      withdrawalEnabled: true
      asset: "BTC"
      maxFee: 5.962133916683182377482808078639209270477294921875
      minFee: 1.46581298050294517310021547018550336360931396484375
  inline_response_200:
    type: "object"
    properties:
      name:
        type: "string"
    example:
      name: "name"
  Error_error:
    type: "object"
    properties:
      message:
        type: "string"
      name:
        type: "string"
